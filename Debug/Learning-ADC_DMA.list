
Learning-ADC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000451c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  080046a4  080046a4  000146a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047c8  080047c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080047c8  080047c8  000147c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047d0  080047d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047d0  080047d0  000147d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047d4  080047d4  000147d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080047d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  2000000c  080047e4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  080047e4  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f98a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f94  00000000  00000000  0002f9c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  00031960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c58  00000000  00000000  00032670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027b4d  00000000  00000000  000332c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef01  00000000  00000000  0005ae15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000facc5  00000000  00000000  00069d16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001649db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036f0  00000000  00000000  00164a2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800468c 	.word	0x0800468c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800468c 	.word	0x0800468c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b5b0      	push	{r4, r5, r7, lr}
 80004de:	b0b8      	sub	sp, #224	; 0xe0
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  char msg_l[]=	"Ce message est un long message pour le test du DMA1.\r\n" \
 80004e2:	4a20      	ldr	r2, [pc, #128]	; (8000564 <main+0x88>)
 80004e4:	1d3b      	adds	r3, r7, #4
 80004e6:	4611      	mov	r1, r2
 80004e8:	22db      	movs	r2, #219	; 0xdb
 80004ea:	4618      	mov	r0, r3
 80004ec:	f004 f8b8 	bl	8004660 <memcpy>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f000 fb60 	bl	8000bb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f83e 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 f952 	bl	80007a0 <MX_GPIO_Init>
  MX_DMA_Init();
 80004fc:	f000 f932 	bl	8000764 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000500:	f000 f900 	bl	8000704 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000504:	f000 f888 	bl	8000618 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_DMA_RegisterCallback(&hdma_usart2_tx, HAL_DMA_XFER_CPLT_CB_ID, &DMATransferComplete);
 8000508:	4a17      	ldr	r2, [pc, #92]	; (8000568 <main+0x8c>)
 800050a:	2100      	movs	r1, #0
 800050c:	4817      	ldr	r0, [pc, #92]	; (800056c <main+0x90>)
 800050e:	f001 fe73 	bl	80021f8 <HAL_DMA_RegisterCallback>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// Set the UART CR3 register = DMA mode is enabled for transmission
	huart2.Instance->CR3 |= USART_CR3_DMAT;
 8000512:	4b17      	ldr	r3, [pc, #92]	; (8000570 <main+0x94>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	689a      	ldr	r2, [r3, #8]
 8000518:	4b15      	ldr	r3, [pc, #84]	; (8000570 <main+0x94>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000520:	609a      	str	r2, [r3, #8]

	// LD2 ON
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000522:	2201      	movs	r2, #1
 8000524:	2120      	movs	r1, #32
 8000526:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800052a:	f002 f887 	bl	800263c <HAL_GPIO_WritePin>

	// Start IT for DMA USART2 TX
	HAL_DMA_Start_IT(&hdma_usart2_tx, (uint32_t)msg_l,(uint32_t)&huart2.Instance->TDR, strlen(msg_l));
 800052e:	1d3c      	adds	r4, r7, #4
 8000530:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <main+0x94>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	3328      	adds	r3, #40	; 0x28
 8000536:	461d      	mov	r5, r3
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	4618      	mov	r0, r3
 800053c:	f7ff fe44 	bl	80001c8 <strlen>
 8000540:	4603      	mov	r3, r0
 8000542:	462a      	mov	r2, r5
 8000544:	4621      	mov	r1, r4
 8000546:	4809      	ldr	r0, [pc, #36]	; (800056c <main+0x90>)
 8000548:	f001 fd46 	bl	8001fd8 <HAL_DMA_Start_IT>

	// Wait a second
	HAL_Delay(1000);
 800054c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000550:	f000 fbac 	bl	8000cac <HAL_Delay>

	// LD2 OFF
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	2120      	movs	r1, #32
 8000558:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800055c:	f002 f86e 	bl	800263c <HAL_GPIO_WritePin>
	huart2.Instance->CR3 |= USART_CR3_DMAT;
 8000560:	e7d7      	b.n	8000512 <main+0x36>
 8000562:	bf00      	nop
 8000564:	080046a4 	.word	0x080046a4
 8000568:	0800086d 	.word	0x0800086d
 800056c:	20000110 	.word	0x20000110
 8000570:	2000008c 	.word	0x2000008c

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b096      	sub	sp, #88	; 0x58
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	2244      	movs	r2, #68	; 0x44
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f004 f87a 	bl	800467c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	463b      	mov	r3, r7
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000596:	f44f 7000 	mov.w	r0, #512	; 0x200
 800059a:	f002 f875 	bl	8002688 <HAL_PWREx_ControlVoltageScaling>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005a4:	f000 f97a 	bl	800089c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a8:	2302      	movs	r3, #2
 80005aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b2:	2310      	movs	r3, #16
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b6:	2302      	movs	r3, #2
 80005b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ba:	2302      	movs	r3, #2
 80005bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005be:	2301      	movs	r3, #1
 80005c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005c2:	230a      	movs	r3, #10
 80005c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005c6:	2307      	movs	r3, #7
 80005c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ca:	2302      	movs	r3, #2
 80005cc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ce:	2302      	movs	r3, #2
 80005d0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	4618      	mov	r0, r3
 80005d8:	f002 f8ac 	bl	8002734 <HAL_RCC_OscConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005e2:	f000 f95b 	bl	800089c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e6:	230f      	movs	r3, #15
 80005e8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ea:	2303      	movs	r3, #3
 80005ec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005fa:	463b      	mov	r3, r7
 80005fc:	2104      	movs	r1, #4
 80005fe:	4618      	mov	r0, r3
 8000600:	f002 fc74 	bl	8002eec <HAL_RCC_ClockConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800060a:	f000 f947 	bl	800089c <Error_Handler>
  }
}
 800060e:	bf00      	nop
 8000610:	3758      	adds	r7, #88	; 0x58
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
	...

08000618 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08a      	sub	sp, #40	; 0x28
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800061e:	f107 031c 	add.w	r3, r7, #28
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]
 8000638:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800063a:	4b2f      	ldr	r3, [pc, #188]	; (80006f8 <MX_ADC1_Init+0xe0>)
 800063c:	4a2f      	ldr	r2, [pc, #188]	; (80006fc <MX_ADC1_Init+0xe4>)
 800063e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000640:	4b2d      	ldr	r3, [pc, #180]	; (80006f8 <MX_ADC1_Init+0xe0>)
 8000642:	2200      	movs	r2, #0
 8000644:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000646:	4b2c      	ldr	r3, [pc, #176]	; (80006f8 <MX_ADC1_Init+0xe0>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800064c:	4b2a      	ldr	r3, [pc, #168]	; (80006f8 <MX_ADC1_Init+0xe0>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000652:	4b29      	ldr	r3, [pc, #164]	; (80006f8 <MX_ADC1_Init+0xe0>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000658:	4b27      	ldr	r3, [pc, #156]	; (80006f8 <MX_ADC1_Init+0xe0>)
 800065a:	2204      	movs	r2, #4
 800065c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800065e:	4b26      	ldr	r3, [pc, #152]	; (80006f8 <MX_ADC1_Init+0xe0>)
 8000660:	2200      	movs	r2, #0
 8000662:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000664:	4b24      	ldr	r3, [pc, #144]	; (80006f8 <MX_ADC1_Init+0xe0>)
 8000666:	2200      	movs	r2, #0
 8000668:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800066a:	4b23      	ldr	r3, [pc, #140]	; (80006f8 <MX_ADC1_Init+0xe0>)
 800066c:	2201      	movs	r2, #1
 800066e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000670:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <MX_ADC1_Init+0xe0>)
 8000672:	2200      	movs	r2, #0
 8000674:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <MX_ADC1_Init+0xe0>)
 800067a:	2200      	movs	r2, #0
 800067c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800067e:	4b1e      	ldr	r3, [pc, #120]	; (80006f8 <MX_ADC1_Init+0xe0>)
 8000680:	2200      	movs	r2, #0
 8000682:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000684:	4b1c      	ldr	r3, [pc, #112]	; (80006f8 <MX_ADC1_Init+0xe0>)
 8000686:	2200      	movs	r2, #0
 8000688:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800068c:	4b1a      	ldr	r3, [pc, #104]	; (80006f8 <MX_ADC1_Init+0xe0>)
 800068e:	2200      	movs	r2, #0
 8000690:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000692:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <MX_ADC1_Init+0xe0>)
 8000694:	2200      	movs	r2, #0
 8000696:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800069a:	4817      	ldr	r0, [pc, #92]	; (80006f8 <MX_ADC1_Init+0xe0>)
 800069c:	f000 fcb6 	bl	800100c <HAL_ADC_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80006a6:	f000 f8f9 	bl	800089c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	4619      	mov	r1, r3
 80006b4:	4810      	ldr	r0, [pc, #64]	; (80006f8 <MX_ADC1_Init+0xe0>)
 80006b6:	f001 fa15 	bl	8001ae4 <HAL_ADCEx_MultiModeConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80006c0:	f000 f8ec 	bl	800089c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006c4:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <MX_ADC1_Init+0xe8>)
 80006c6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006c8:	2306      	movs	r3, #6
 80006ca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006d0:	237f      	movs	r3, #127	; 0x7f
 80006d2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006d4:	2304      	movs	r3, #4
 80006d6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	4619      	mov	r1, r3
 80006e0:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_ADC1_Init+0xe0>)
 80006e2:	f000 fde9 	bl	80012b8 <HAL_ADC_ConfigChannel>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80006ec:	f000 f8d6 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	3728      	adds	r7, #40	; 0x28
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000028 	.word	0x20000028
 80006fc:	50040000 	.word	0x50040000
 8000700:	14f00020 	.word	0x14f00020

08000704 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000708:	4b14      	ldr	r3, [pc, #80]	; (800075c <MX_USART2_UART_Init+0x58>)
 800070a:	4a15      	ldr	r2, [pc, #84]	; (8000760 <MX_USART2_UART_Init+0x5c>)
 800070c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800070e:	4b13      	ldr	r3, [pc, #76]	; (800075c <MX_USART2_UART_Init+0x58>)
 8000710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000714:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_USART2_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_USART2_UART_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_USART2_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_USART2_UART_Init+0x58>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <MX_USART2_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_USART2_UART_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <MX_USART2_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_USART2_UART_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_USART2_UART_Init+0x58>)
 8000748:	f003 fab0 	bl	8003cac <HAL_UART_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000752:	f000 f8a3 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	2000008c 	.word	0x2000008c
 8000760:	40004400 	.word	0x40004400

08000764 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_DMA_Init+0x38>)
 800076c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800076e:	4a0b      	ldr	r2, [pc, #44]	; (800079c <MX_DMA_Init+0x38>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6493      	str	r3, [r2, #72]	; 0x48
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_DMA_Init+0x38>)
 8000778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000782:	2200      	movs	r2, #0
 8000784:	2100      	movs	r1, #0
 8000786:	2011      	movs	r0, #17
 8000788:	f001 fb37 	bl	8001dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800078c:	2011      	movs	r0, #17
 800078e:	f001 fb50 	bl	8001e32 <HAL_NVIC_EnableIRQ>

}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40021000 	.word	0x40021000

080007a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	; 0x28
 80007a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b6:	4b2b      	ldr	r3, [pc, #172]	; (8000864 <MX_GPIO_Init+0xc4>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	4a2a      	ldr	r2, [pc, #168]	; (8000864 <MX_GPIO_Init+0xc4>)
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c2:	4b28      	ldr	r3, [pc, #160]	; (8000864 <MX_GPIO_Init+0xc4>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	f003 0304 	and.w	r3, r3, #4
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ce:	4b25      	ldr	r3, [pc, #148]	; (8000864 <MX_GPIO_Init+0xc4>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	4a24      	ldr	r2, [pc, #144]	; (8000864 <MX_GPIO_Init+0xc4>)
 80007d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007da:	4b22      	ldr	r3, [pc, #136]	; (8000864 <MX_GPIO_Init+0xc4>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <MX_GPIO_Init+0xc4>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	4a1e      	ldr	r2, [pc, #120]	; (8000864 <MX_GPIO_Init+0xc4>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f2:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <MX_GPIO_Init+0xc4>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	4b19      	ldr	r3, [pc, #100]	; (8000864 <MX_GPIO_Init+0xc4>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	4a18      	ldr	r2, [pc, #96]	; (8000864 <MX_GPIO_Init+0xc4>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080a:	4b16      	ldr	r3, [pc, #88]	; (8000864 <MX_GPIO_Init+0xc4>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2120      	movs	r1, #32
 800081a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800081e:	f001 ff0d 	bl	800263c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000822:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000828:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800082c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4619      	mov	r1, r3
 8000838:	480b      	ldr	r0, [pc, #44]	; (8000868 <MX_GPIO_Init+0xc8>)
 800083a:	f001 fd55 	bl	80022e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800083e:	2320      	movs	r3, #32
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000858:	f001 fd46 	bl	80022e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800085c:	bf00      	nop
 800085e:	3728      	adds	r7, #40	; 0x28
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40021000 	.word	0x40021000
 8000868:	48000800 	.word	0x48000800

0800086c <DMATransferComplete>:

/* USER CODE BEGIN 4 */
void DMATransferComplete(DMA_HandleTypeDef *hdma)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	// Reset the UART CR3 register = DMA mode is disabled for transmission
	huart2.Instance->CR3 &=~ USART_CR3_DMAT;
 8000874:	4b08      	ldr	r3, [pc, #32]	; (8000898 <DMATransferComplete+0x2c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	689a      	ldr	r2, [r3, #8]
 800087a:	4b07      	ldr	r3, [pc, #28]	; (8000898 <DMATransferComplete+0x2c>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000882:	609a      	str	r2, [r3, #8]

	// LD2 OFF
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	2120      	movs	r1, #32
 8000888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088c:	f001 fed6 	bl	800263c <HAL_GPIO_WritePin>
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	2000008c 	.word	0x2000008c

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
}
 80008a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <Error_Handler+0x8>
	...

080008a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ae:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <HAL_MspInit+0x44>)
 80008b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008b2:	4a0e      	ldr	r2, [pc, #56]	; (80008ec <HAL_MspInit+0x44>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	6613      	str	r3, [r2, #96]	; 0x60
 80008ba:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <HAL_MspInit+0x44>)
 80008bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <HAL_MspInit+0x44>)
 80008c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ca:	4a08      	ldr	r2, [pc, #32]	; (80008ec <HAL_MspInit+0x44>)
 80008cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d0:	6593      	str	r3, [r2, #88]	; 0x58
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <HAL_MspInit+0x44>)
 80008d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	40021000 	.word	0x40021000

080008f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b0ac      	sub	sp, #176	; 0xb0
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	2288      	movs	r2, #136	; 0x88
 800090e:	2100      	movs	r1, #0
 8000910:	4618      	mov	r0, r3
 8000912:	f003 feb3 	bl	800467c <memset>
  if(hadc->Instance==ADC1)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a27      	ldr	r2, [pc, #156]	; (80009b8 <HAL_ADC_MspInit+0xc8>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d147      	bne.n	80009b0 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000920:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000924:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000926:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800092a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800092e:	2302      	movs	r3, #2
 8000930:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000932:	2301      	movs	r3, #1
 8000934:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000936:	2308      	movs	r3, #8
 8000938:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800093a:	2307      	movs	r3, #7
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800093e:	2302      	movs	r3, #2
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000942:	2302      	movs	r3, #2
 8000944:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000946:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800094a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	4618      	mov	r0, r3
 8000952:	f002 fcef 	bl	8003334 <HAL_RCCEx_PeriphCLKConfig>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800095c:	f7ff ff9e 	bl	800089c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000960:	4b16      	ldr	r3, [pc, #88]	; (80009bc <HAL_ADC_MspInit+0xcc>)
 8000962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000964:	4a15      	ldr	r2, [pc, #84]	; (80009bc <HAL_ADC_MspInit+0xcc>)
 8000966:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800096a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096c:	4b13      	ldr	r3, [pc, #76]	; (80009bc <HAL_ADC_MspInit+0xcc>)
 800096e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000970:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000974:	613b      	str	r3, [r7, #16]
 8000976:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000978:	4b10      	ldr	r3, [pc, #64]	; (80009bc <HAL_ADC_MspInit+0xcc>)
 800097a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097c:	4a0f      	ldr	r2, [pc, #60]	; (80009bc <HAL_ADC_MspInit+0xcc>)
 800097e:	f043 0301 	orr.w	r3, r3, #1
 8000982:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000984:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <HAL_ADC_MspInit+0xcc>)
 8000986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000988:	f003 0301 	and.w	r3, r3, #1
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000990:	2301      	movs	r3, #1
 8000992:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000996:	230b      	movs	r3, #11
 8000998:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009a6:	4619      	mov	r1, r3
 80009a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ac:	f001 fc9c 	bl	80022e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009b0:	bf00      	nop
 80009b2:	37b0      	adds	r7, #176	; 0xb0
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	50040000 	.word	0x50040000
 80009bc:	40021000 	.word	0x40021000

080009c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b0ac      	sub	sp, #176	; 0xb0
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	2288      	movs	r2, #136	; 0x88
 80009de:	2100      	movs	r1, #0
 80009e0:	4618      	mov	r0, r3
 80009e2:	f003 fe4b 	bl	800467c <memset>
  if(huart->Instance==USART2)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a36      	ldr	r2, [pc, #216]	; (8000ac4 <HAL_UART_MspInit+0x104>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d164      	bne.n	8000aba <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009f0:	2302      	movs	r3, #2
 80009f2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4618      	mov	r0, r3
 80009fe:	f002 fc99 	bl	8003334 <HAL_RCCEx_PeriphCLKConfig>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a08:	f7ff ff48 	bl	800089c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a0c:	4b2e      	ldr	r3, [pc, #184]	; (8000ac8 <HAL_UART_MspInit+0x108>)
 8000a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a10:	4a2d      	ldr	r2, [pc, #180]	; (8000ac8 <HAL_UART_MspInit+0x108>)
 8000a12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a16:	6593      	str	r3, [r2, #88]	; 0x58
 8000a18:	4b2b      	ldr	r3, [pc, #172]	; (8000ac8 <HAL_UART_MspInit+0x108>)
 8000a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a24:	4b28      	ldr	r3, [pc, #160]	; (8000ac8 <HAL_UART_MspInit+0x108>)
 8000a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a28:	4a27      	ldr	r2, [pc, #156]	; (8000ac8 <HAL_UART_MspInit+0x108>)
 8000a2a:	f043 0301 	orr.w	r3, r3, #1
 8000a2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a30:	4b25      	ldr	r3, [pc, #148]	; (8000ac8 <HAL_UART_MspInit+0x108>)
 8000a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a34:	f003 0301 	and.w	r3, r3, #1
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a3c:	230c      	movs	r3, #12
 8000a3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a54:	2307      	movs	r3, #7
 8000a56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a5e:	4619      	mov	r1, r3
 8000a60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a64:	f001 fc40 	bl	80022e8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000a68:	4b18      	ldr	r3, [pc, #96]	; (8000acc <HAL_UART_MspInit+0x10c>)
 8000a6a:	4a19      	ldr	r2, [pc, #100]	; (8000ad0 <HAL_UART_MspInit+0x110>)
 8000a6c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8000a6e:	4b17      	ldr	r3, [pc, #92]	; (8000acc <HAL_UART_MspInit+0x10c>)
 8000a70:	2202      	movs	r2, #2
 8000a72:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a74:	4b15      	ldr	r3, [pc, #84]	; (8000acc <HAL_UART_MspInit+0x10c>)
 8000a76:	2210      	movs	r2, #16
 8000a78:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a7a:	4b14      	ldr	r3, [pc, #80]	; (8000acc <HAL_UART_MspInit+0x10c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <HAL_UART_MspInit+0x10c>)
 8000a82:	2280      	movs	r2, #128	; 0x80
 8000a84:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a86:	4b11      	ldr	r3, [pc, #68]	; (8000acc <HAL_UART_MspInit+0x10c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <HAL_UART_MspInit+0x10c>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <HAL_UART_MspInit+0x10c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <HAL_UART_MspInit+0x10c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000a9e:	480b      	ldr	r0, [pc, #44]	; (8000acc <HAL_UART_MspInit+0x10c>)
 8000aa0:	f001 f9e2 	bl	8001e68 <HAL_DMA_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8000aaa:	f7ff fef7 	bl	800089c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4a06      	ldr	r2, [pc, #24]	; (8000acc <HAL_UART_MspInit+0x10c>)
 8000ab2:	66da      	str	r2, [r3, #108]	; 0x6c
 8000ab4:	4a05      	ldr	r2, [pc, #20]	; (8000acc <HAL_UART_MspInit+0x10c>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aba:	bf00      	nop
 8000abc:	37b0      	adds	r7, #176	; 0xb0
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40004400 	.word	0x40004400
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	20000110 	.word	0x20000110
 8000ad0:	40020080 	.word	0x40020080

08000ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <NMI_Handler+0x4>

08000ada <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <HardFault_Handler+0x4>

08000ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <MemManage_Handler+0x4>

08000ae6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <BusFault_Handler+0x4>

08000aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <UsageFault_Handler+0x4>

08000af2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b20:	f000 f8a4 	bl	8000c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000b2c:	4802      	ldr	r0, [pc, #8]	; (8000b38 <DMA1_Channel7_IRQHandler+0x10>)
 8000b2e:	f001 fab3 	bl	8002098 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000110 	.word	0x20000110

08000b3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <SystemInit+0x20>)
 8000b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b46:	4a05      	ldr	r2, [pc, #20]	; (8000b5c <SystemInit+0x20>)
 8000b48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b64:	f7ff ffea 	bl	8000b3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b68:	480c      	ldr	r0, [pc, #48]	; (8000b9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b6a:	490d      	ldr	r1, [pc, #52]	; (8000ba0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ba4 <LoopForever+0xe>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b70:	e002      	b.n	8000b78 <LoopCopyDataInit>

08000b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b76:	3304      	adds	r3, #4

08000b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b7c:	d3f9      	bcc.n	8000b72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b80:	4c0a      	ldr	r4, [pc, #40]	; (8000bac <LoopForever+0x16>)
  movs r3, #0
 8000b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b84:	e001      	b.n	8000b8a <LoopFillZerobss>

08000b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b88:	3204      	adds	r2, #4

08000b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b8c:	d3fb      	bcc.n	8000b86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b8e:	f003 fd43 	bl	8004618 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b92:	f7ff fca3 	bl	80004dc <main>

08000b96 <LoopForever>:

LoopForever:
    b LoopForever
 8000b96:	e7fe      	b.n	8000b96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b98:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ba4:	080047d8 	.word	0x080047d8
  ldr r2, =_sbss
 8000ba8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bac:	2000015c 	.word	0x2000015c

08000bb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bb0:	e7fe      	b.n	8000bb0 <ADC1_2_IRQHandler>
	...

08000bb4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <HAL_Init+0x3c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a0b      	ldr	r2, [pc, #44]	; (8000bf0 <HAL_Init+0x3c>)
 8000bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bc8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bca:	2003      	movs	r0, #3
 8000bcc:	f001 f90a 	bl	8001de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	f000 f80f 	bl	8000bf4 <HAL_InitTick>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d002      	beq.n	8000be2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	71fb      	strb	r3, [r7, #7]
 8000be0:	e001      	b.n	8000be6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000be2:	f7ff fe61 	bl	80008a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000be6:	79fb      	ldrb	r3, [r7, #7]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40022000 	.word	0x40022000

08000bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c00:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <HAL_InitTick+0x6c>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d023      	beq.n	8000c50 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c08:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <HAL_InitTick+0x70>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <HAL_InitTick+0x6c>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	4619      	mov	r1, r3
 8000c12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f001 f915 	bl	8001e4e <HAL_SYSTICK_Config>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d10f      	bne.n	8000c4a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b0f      	cmp	r3, #15
 8000c2e:	d809      	bhi.n	8000c44 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c30:	2200      	movs	r2, #0
 8000c32:	6879      	ldr	r1, [r7, #4]
 8000c34:	f04f 30ff 	mov.w	r0, #4294967295
 8000c38:	f001 f8df 	bl	8001dfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c3c:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <HAL_InitTick+0x74>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6013      	str	r3, [r2, #0]
 8000c42:	e007      	b.n	8000c54 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c44:	2301      	movs	r3, #1
 8000c46:	73fb      	strb	r3, [r7, #15]
 8000c48:	e004      	b.n	8000c54 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	73fb      	strb	r3, [r7, #15]
 8000c4e:	e001      	b.n	8000c54 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c50:	2301      	movs	r3, #1
 8000c52:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000008 	.word	0x20000008
 8000c64:	20000000 	.word	0x20000000
 8000c68:	20000004 	.word	0x20000004

08000c6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_IncTick+0x20>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	461a      	mov	r2, r3
 8000c76:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_IncTick+0x24>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <HAL_IncTick+0x24>)
 8000c7e:	6013      	str	r3, [r2, #0]
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	20000008 	.word	0x20000008
 8000c90:	20000158 	.word	0x20000158

08000c94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  return uwTick;
 8000c98:	4b03      	ldr	r3, [pc, #12]	; (8000ca8 <HAL_GetTick+0x14>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	20000158 	.word	0x20000158

08000cac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb4:	f7ff ffee 	bl	8000c94 <HAL_GetTick>
 8000cb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc4:	d005      	beq.n	8000cd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000cc6:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <HAL_Delay+0x44>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	4413      	add	r3, r2
 8000cd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cd2:	bf00      	nop
 8000cd4:	f7ff ffde 	bl	8000c94 <HAL_GetTick>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d8f7      	bhi.n	8000cd4 <HAL_Delay+0x28>
  {
  }
}
 8000ce4:	bf00      	nop
 8000ce6:	bf00      	nop
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000008 	.word	0x20000008

08000cf4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	431a      	orrs	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
 8000d22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	431a      	orrs	r2, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	609a      	str	r2, [r3, #8]
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b087      	sub	sp, #28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
 8000d68:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	3360      	adds	r3, #96	; 0x60
 8000d6e:	461a      	mov	r2, r3
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	4413      	add	r3, r2
 8000d76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <LL_ADC_SetOffset+0x44>)
 8000d7e:	4013      	ands	r3, r2
 8000d80:	687a      	ldr	r2, [r7, #4]
 8000d82:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000d86:	683a      	ldr	r2, [r7, #0]
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000d94:	bf00      	nop
 8000d96:	371c      	adds	r7, #28
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	03fff000 	.word	0x03fff000

08000da4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3360      	adds	r3, #96	; 0x60
 8000db2:	461a      	mov	r2, r3
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	4413      	add	r3, r2
 8000dba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b087      	sub	sp, #28
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	3360      	adds	r3, #96	; 0x60
 8000de0:	461a      	mov	r2, r3
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	4413      	add	r3, r2
 8000de8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	431a      	orrs	r2, r3
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000dfa:	bf00      	nop
 8000dfc:	371c      	adds	r7, #28
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e06:	b480      	push	{r7}
 8000e08:	b087      	sub	sp, #28
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	60f8      	str	r0, [r7, #12]
 8000e0e:	60b9      	str	r1, [r7, #8]
 8000e10:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	3330      	adds	r3, #48	; 0x30
 8000e16:	461a      	mov	r2, r3
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	0a1b      	lsrs	r3, r3, #8
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	f003 030c 	and.w	r3, r3, #12
 8000e22:	4413      	add	r3, r2
 8000e24:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	f003 031f 	and.w	r3, r3, #31
 8000e30:	211f      	movs	r1, #31
 8000e32:	fa01 f303 	lsl.w	r3, r1, r3
 8000e36:	43db      	mvns	r3, r3
 8000e38:	401a      	ands	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	0e9b      	lsrs	r3, r3, #26
 8000e3e:	f003 011f 	and.w	r1, r3, #31
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	f003 031f 	and.w	r3, r3, #31
 8000e48:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4c:	431a      	orrs	r2, r3
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e52:	bf00      	nop
 8000e54:	371c      	adds	r7, #28
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	b087      	sub	sp, #28
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	60f8      	str	r0, [r7, #12]
 8000e66:	60b9      	str	r1, [r7, #8]
 8000e68:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	3314      	adds	r3, #20
 8000e6e:	461a      	mov	r2, r3
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	0e5b      	lsrs	r3, r3, #25
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	f003 0304 	and.w	r3, r3, #4
 8000e7a:	4413      	add	r3, r2
 8000e7c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	0d1b      	lsrs	r3, r3, #20
 8000e86:	f003 031f 	and.w	r3, r3, #31
 8000e8a:	2107      	movs	r1, #7
 8000e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	401a      	ands	r2, r3
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	0d1b      	lsrs	r3, r3, #20
 8000e98:	f003 031f 	and.w	r3, r3, #31
 8000e9c:	6879      	ldr	r1, [r7, #4]
 8000e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea2:	431a      	orrs	r2, r3
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000ea8:	bf00      	nop
 8000eaa:	371c      	adds	r7, #28
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	401a      	ands	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f003 0318 	and.w	r3, r3, #24
 8000ed6:	4908      	ldr	r1, [pc, #32]	; (8000ef8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000ed8:	40d9      	lsrs	r1, r3
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	400b      	ands	r3, r1
 8000ede:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ee2:	431a      	orrs	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000eea:	bf00      	nop
 8000eec:	3714      	adds	r7, #20
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	0007ffff 	.word	0x0007ffff

08000efc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000f0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	6093      	str	r3, [r2, #8]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f34:	d101      	bne.n	8000f3a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f36:	2301      	movs	r3, #1
 8000f38:	e000      	b.n	8000f3c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f3a:	2300      	movs	r3, #0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000f58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f5c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000f84:	d101      	bne.n	8000f8a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f86:	2301      	movs	r3, #1
 8000f88:	e000      	b.n	8000f8c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f8a:	2300      	movs	r3, #0
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d101      	bne.n	8000fb0 <LL_ADC_IsEnabled+0x18>
 8000fac:	2301      	movs	r3, #1
 8000fae:	e000      	b.n	8000fb2 <LL_ADC_IsEnabled+0x1a>
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b083      	sub	sp, #12
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	f003 0304 	and.w	r3, r3, #4
 8000fce:	2b04      	cmp	r3, #4
 8000fd0:	d101      	bne.n	8000fd6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e000      	b.n	8000fd8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000fd6:	2300      	movs	r3, #0
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f003 0308 	and.w	r3, r3, #8
 8000ff4:	2b08      	cmp	r3, #8
 8000ff6:	d101      	bne.n	8000ffc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e000      	b.n	8000ffe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
	...

0800100c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b089      	sub	sp, #36	; 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001014:	2300      	movs	r3, #0
 8001016:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001018:	2300      	movs	r3, #0
 800101a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e136      	b.n	8001294 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	691b      	ldr	r3, [r3, #16]
 800102a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001030:	2b00      	cmp	r3, #0
 8001032:	d109      	bne.n	8001048 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff fc5b 	bl	80008f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2200      	movs	r2, #0
 8001044:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff67 	bl	8000f20 <LL_ADC_IsDeepPowerDownEnabled>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d004      	beq.n	8001062 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff4d 	bl	8000efc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff ff82 	bl	8000f70 <LL_ADC_IsInternalRegulatorEnabled>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d115      	bne.n	800109e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff ff66 	bl	8000f48 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800107c:	4b87      	ldr	r3, [pc, #540]	; (800129c <HAL_ADC_Init+0x290>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	099b      	lsrs	r3, r3, #6
 8001082:	4a87      	ldr	r2, [pc, #540]	; (80012a0 <HAL_ADC_Init+0x294>)
 8001084:	fba2 2303 	umull	r2, r3, r2, r3
 8001088:	099b      	lsrs	r3, r3, #6
 800108a:	3301      	adds	r3, #1
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001090:	e002      	b.n	8001098 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	3b01      	subs	r3, #1
 8001096:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1f9      	bne.n	8001092 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff ff64 	bl	8000f70 <LL_ADC_IsInternalRegulatorEnabled>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d10d      	bne.n	80010ca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010b2:	f043 0210 	orr.w	r2, r3, #16
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010be:	f043 0201 	orr.w	r2, r3, #1
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff ff75 	bl	8000fbe <LL_ADC_REG_IsConversionOngoing>
 80010d4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010da:	f003 0310 	and.w	r3, r3, #16
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f040 80cf 	bne.w	8001282 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f040 80cb 	bne.w	8001282 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010f0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80010f4:	f043 0202 	orr.w	r2, r3, #2
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff49 	bl	8000f98 <LL_ADC_IsEnabled>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d115      	bne.n	8001138 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800110c:	4865      	ldr	r0, [pc, #404]	; (80012a4 <HAL_ADC_Init+0x298>)
 800110e:	f7ff ff43 	bl	8000f98 <LL_ADC_IsEnabled>
 8001112:	4604      	mov	r4, r0
 8001114:	4864      	ldr	r0, [pc, #400]	; (80012a8 <HAL_ADC_Init+0x29c>)
 8001116:	f7ff ff3f 	bl	8000f98 <LL_ADC_IsEnabled>
 800111a:	4603      	mov	r3, r0
 800111c:	431c      	orrs	r4, r3
 800111e:	4863      	ldr	r0, [pc, #396]	; (80012ac <HAL_ADC_Init+0x2a0>)
 8001120:	f7ff ff3a 	bl	8000f98 <LL_ADC_IsEnabled>
 8001124:	4603      	mov	r3, r0
 8001126:	4323      	orrs	r3, r4
 8001128:	2b00      	cmp	r3, #0
 800112a:	d105      	bne.n	8001138 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	4619      	mov	r1, r3
 8001132:	485f      	ldr	r0, [pc, #380]	; (80012b0 <HAL_ADC_Init+0x2a4>)
 8001134:	f7ff fdde 	bl	8000cf4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	7e5b      	ldrb	r3, [r3, #25]
 800113c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001142:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001148:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800114e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001156:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001158:	4313      	orrs	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d106      	bne.n	8001174 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116a:	3b01      	subs	r3, #1
 800116c:	045b      	lsls	r3, r3, #17
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001178:	2b00      	cmp	r3, #0
 800117a:	d009      	beq.n	8001190 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001180:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001188:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	68da      	ldr	r2, [r3, #12]
 8001196:	4b47      	ldr	r3, [pc, #284]	; (80012b4 <HAL_ADC_Init+0x2a8>)
 8001198:	4013      	ands	r3, r2
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	6812      	ldr	r2, [r2, #0]
 800119e:	69b9      	ldr	r1, [r7, #24]
 80011a0:	430b      	orrs	r3, r1
 80011a2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff08 	bl	8000fbe <LL_ADC_REG_IsConversionOngoing>
 80011ae:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff15 	bl	8000fe4 <LL_ADC_INJ_IsConversionOngoing>
 80011ba:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d13d      	bne.n	800123e <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d13a      	bne.n	800123e <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80011cc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80011d4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80011e4:	f023 0302 	bic.w	r3, r3, #2
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	6812      	ldr	r2, [r2, #0]
 80011ec:	69b9      	ldr	r1, [r7, #24]
 80011ee:	430b      	orrs	r3, r1
 80011f0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d118      	bne.n	800122e <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	691b      	ldr	r3, [r3, #16]
 8001202:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001206:	f023 0304 	bic.w	r3, r3, #4
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001212:	4311      	orrs	r1, r2
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001218:	4311      	orrs	r1, r2
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800121e:	430a      	orrs	r2, r1
 8001220:	431a      	orrs	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f042 0201 	orr.w	r2, r2, #1
 800122a:	611a      	str	r2, [r3, #16]
 800122c:	e007      	b.n	800123e <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	691a      	ldr	r2, [r3, #16]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f022 0201 	bic.w	r2, r2, #1
 800123c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	691b      	ldr	r3, [r3, #16]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d10c      	bne.n	8001260 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124c:	f023 010f 	bic.w	r1, r3, #15
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	69db      	ldr	r3, [r3, #28]
 8001254:	1e5a      	subs	r2, r3, #1
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	430a      	orrs	r2, r1
 800125c:	631a      	str	r2, [r3, #48]	; 0x30
 800125e:	e007      	b.n	8001270 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f022 020f 	bic.w	r2, r2, #15
 800126e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001274:	f023 0303 	bic.w	r3, r3, #3
 8001278:	f043 0201 	orr.w	r2, r3, #1
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	655a      	str	r2, [r3, #84]	; 0x54
 8001280:	e007      	b.n	8001292 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001286:	f043 0210 	orr.w	r2, r3, #16
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001292:	7ffb      	ldrb	r3, [r7, #31]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3724      	adds	r7, #36	; 0x24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd90      	pop	{r4, r7, pc}
 800129c:	20000000 	.word	0x20000000
 80012a0:	053e2d63 	.word	0x053e2d63
 80012a4:	50040000 	.word	0x50040000
 80012a8:	50040100 	.word	0x50040100
 80012ac:	50040200 	.word	0x50040200
 80012b0:	50040300 	.word	0x50040300
 80012b4:	fff0c007 	.word	0xfff0c007

080012b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b0b6      	sub	sp, #216	; 0xd8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012c2:	2300      	movs	r3, #0
 80012c4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d101      	bne.n	80012da <HAL_ADC_ConfigChannel+0x22>
 80012d6:	2302      	movs	r3, #2
 80012d8:	e3c7      	b.n	8001a6a <HAL_ADC_ConfigChannel+0x7b2>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2201      	movs	r2, #1
 80012de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff fe69 	bl	8000fbe <LL_ADC_REG_IsConversionOngoing>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f040 83a8 	bne.w	8001a44 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b05      	cmp	r3, #5
 80012fa:	d824      	bhi.n	8001346 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	3b02      	subs	r3, #2
 8001302:	2b03      	cmp	r3, #3
 8001304:	d81b      	bhi.n	800133e <HAL_ADC_ConfigChannel+0x86>
 8001306:	a201      	add	r2, pc, #4	; (adr r2, 800130c <HAL_ADC_ConfigChannel+0x54>)
 8001308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800130c:	0800131d 	.word	0x0800131d
 8001310:	08001325 	.word	0x08001325
 8001314:	0800132d 	.word	0x0800132d
 8001318:	08001335 	.word	0x08001335
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	220c      	movs	r2, #12
 8001320:	605a      	str	r2, [r3, #4]
          break;
 8001322:	e011      	b.n	8001348 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	2212      	movs	r2, #18
 8001328:	605a      	str	r2, [r3, #4]
          break;
 800132a:	e00d      	b.n	8001348 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	2218      	movs	r2, #24
 8001330:	605a      	str	r2, [r3, #4]
          break;
 8001332:	e009      	b.n	8001348 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	f44f 7280 	mov.w	r2, #256	; 0x100
 800133a:	605a      	str	r2, [r3, #4]
          break;
 800133c:	e004      	b.n	8001348 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	2206      	movs	r2, #6
 8001342:	605a      	str	r2, [r3, #4]
          break;
 8001344:	e000      	b.n	8001348 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001346:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6818      	ldr	r0, [r3, #0]
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	6859      	ldr	r1, [r3, #4]
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	461a      	mov	r2, r3
 8001356:	f7ff fd56 	bl	8000e06 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fe2d 	bl	8000fbe <LL_ADC_REG_IsConversionOngoing>
 8001364:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fe39 	bl	8000fe4 <LL_ADC_INJ_IsConversionOngoing>
 8001372:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001376:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800137a:	2b00      	cmp	r3, #0
 800137c:	f040 81a6 	bne.w	80016cc <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001380:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001384:	2b00      	cmp	r3, #0
 8001386:	f040 81a1 	bne.w	80016cc <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6818      	ldr	r0, [r3, #0]
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	6819      	ldr	r1, [r3, #0]
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	461a      	mov	r2, r3
 8001398:	f7ff fd61 	bl	8000e5e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	695a      	ldr	r2, [r3, #20]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	08db      	lsrs	r3, r3, #3
 80013a8:	f003 0303 	and.w	r3, r3, #3
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	2b04      	cmp	r3, #4
 80013bc:	d00a      	beq.n	80013d4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6818      	ldr	r0, [r3, #0]
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	6919      	ldr	r1, [r3, #16]
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80013ce:	f7ff fcc5 	bl	8000d5c <LL_ADC_SetOffset>
 80013d2:	e17b      	b.n	80016cc <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2100      	movs	r1, #0
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fce2 	bl	8000da4 <LL_ADC_GetOffsetChannel>
 80013e0:	4603      	mov	r3, r0
 80013e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10a      	bne.n	8001400 <HAL_ADC_ConfigChannel+0x148>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2100      	movs	r1, #0
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fcd7 	bl	8000da4 <LL_ADC_GetOffsetChannel>
 80013f6:	4603      	mov	r3, r0
 80013f8:	0e9b      	lsrs	r3, r3, #26
 80013fa:	f003 021f 	and.w	r2, r3, #31
 80013fe:	e01e      	b.n	800143e <HAL_ADC_ConfigChannel+0x186>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fccc 	bl	8000da4 <LL_ADC_GetOffsetChannel>
 800140c:	4603      	mov	r3, r0
 800140e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001412:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001416:	fa93 f3a3 	rbit	r3, r3
 800141a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800141e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001422:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001426:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800142e:	2320      	movs	r3, #32
 8001430:	e004      	b.n	800143c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001432:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001436:	fab3 f383 	clz	r3, r3
 800143a:	b2db      	uxtb	r3, r3
 800143c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001446:	2b00      	cmp	r3, #0
 8001448:	d105      	bne.n	8001456 <HAL_ADC_ConfigChannel+0x19e>
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	0e9b      	lsrs	r3, r3, #26
 8001450:	f003 031f 	and.w	r3, r3, #31
 8001454:	e018      	b.n	8001488 <HAL_ADC_ConfigChannel+0x1d0>
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001462:	fa93 f3a3 	rbit	r3, r3
 8001466:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800146a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800146e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001472:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800147a:	2320      	movs	r3, #32
 800147c:	e004      	b.n	8001488 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800147e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001482:	fab3 f383 	clz	r3, r3
 8001486:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001488:	429a      	cmp	r2, r3
 800148a:	d106      	bne.n	800149a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2200      	movs	r2, #0
 8001492:	2100      	movs	r1, #0
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fc9b 	bl	8000dd0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2101      	movs	r1, #1
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff fc7f 	bl	8000da4 <LL_ADC_GetOffsetChannel>
 80014a6:	4603      	mov	r3, r0
 80014a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d10a      	bne.n	80014c6 <HAL_ADC_ConfigChannel+0x20e>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2101      	movs	r1, #1
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fc74 	bl	8000da4 <LL_ADC_GetOffsetChannel>
 80014bc:	4603      	mov	r3, r0
 80014be:	0e9b      	lsrs	r3, r3, #26
 80014c0:	f003 021f 	and.w	r2, r3, #31
 80014c4:	e01e      	b.n	8001504 <HAL_ADC_ConfigChannel+0x24c>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2101      	movs	r1, #1
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fc69 	bl	8000da4 <LL_ADC_GetOffsetChannel>
 80014d2:	4603      	mov	r3, r0
 80014d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80014dc:	fa93 f3a3 	rbit	r3, r3
 80014e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80014e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80014e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80014ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d101      	bne.n	80014f8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80014f4:	2320      	movs	r3, #32
 80014f6:	e004      	b.n	8001502 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80014f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80014fc:	fab3 f383 	clz	r3, r3
 8001500:	b2db      	uxtb	r3, r3
 8001502:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800150c:	2b00      	cmp	r3, #0
 800150e:	d105      	bne.n	800151c <HAL_ADC_ConfigChannel+0x264>
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	0e9b      	lsrs	r3, r3, #26
 8001516:	f003 031f 	and.w	r3, r3, #31
 800151a:	e018      	b.n	800154e <HAL_ADC_ConfigChannel+0x296>
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001524:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001528:	fa93 f3a3 	rbit	r3, r3
 800152c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001530:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001534:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001538:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800153c:	2b00      	cmp	r3, #0
 800153e:	d101      	bne.n	8001544 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001540:	2320      	movs	r3, #32
 8001542:	e004      	b.n	800154e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001544:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001548:	fab3 f383 	clz	r3, r3
 800154c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800154e:	429a      	cmp	r2, r3
 8001550:	d106      	bne.n	8001560 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2200      	movs	r2, #0
 8001558:	2101      	movs	r1, #1
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff fc38 	bl	8000dd0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2102      	movs	r1, #2
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fc1c 	bl	8000da4 <LL_ADC_GetOffsetChannel>
 800156c:	4603      	mov	r3, r0
 800156e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001572:	2b00      	cmp	r3, #0
 8001574:	d10a      	bne.n	800158c <HAL_ADC_ConfigChannel+0x2d4>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2102      	movs	r1, #2
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fc11 	bl	8000da4 <LL_ADC_GetOffsetChannel>
 8001582:	4603      	mov	r3, r0
 8001584:	0e9b      	lsrs	r3, r3, #26
 8001586:	f003 021f 	and.w	r2, r3, #31
 800158a:	e01e      	b.n	80015ca <HAL_ADC_ConfigChannel+0x312>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2102      	movs	r1, #2
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fc06 	bl	8000da4 <LL_ADC_GetOffsetChannel>
 8001598:	4603      	mov	r3, r0
 800159a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015a2:	fa93 f3a3 	rbit	r3, r3
 80015a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80015aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80015ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80015b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80015ba:	2320      	movs	r3, #32
 80015bc:	e004      	b.n	80015c8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80015be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015c2:	fab3 f383 	clz	r3, r3
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d105      	bne.n	80015e2 <HAL_ADC_ConfigChannel+0x32a>
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	0e9b      	lsrs	r3, r3, #26
 80015dc:	f003 031f 	and.w	r3, r3, #31
 80015e0:	e016      	b.n	8001610 <HAL_ADC_ConfigChannel+0x358>
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80015ee:	fa93 f3a3 	rbit	r3, r3
 80015f2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80015f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80015f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80015fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001602:	2320      	movs	r3, #32
 8001604:	e004      	b.n	8001610 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001606:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800160a:	fab3 f383 	clz	r3, r3
 800160e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001610:	429a      	cmp	r2, r3
 8001612:	d106      	bne.n	8001622 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2200      	movs	r2, #0
 800161a:	2102      	movs	r1, #2
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fbd7 	bl	8000dd0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2103      	movs	r1, #3
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fbbb 	bl	8000da4 <LL_ADC_GetOffsetChannel>
 800162e:	4603      	mov	r3, r0
 8001630:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001634:	2b00      	cmp	r3, #0
 8001636:	d10a      	bne.n	800164e <HAL_ADC_ConfigChannel+0x396>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2103      	movs	r1, #3
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fbb0 	bl	8000da4 <LL_ADC_GetOffsetChannel>
 8001644:	4603      	mov	r3, r0
 8001646:	0e9b      	lsrs	r3, r3, #26
 8001648:	f003 021f 	and.w	r2, r3, #31
 800164c:	e017      	b.n	800167e <HAL_ADC_ConfigChannel+0x3c6>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2103      	movs	r1, #3
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fba5 	bl	8000da4 <LL_ADC_GetOffsetChannel>
 800165a:	4603      	mov	r3, r0
 800165c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001660:	fa93 f3a3 	rbit	r3, r3
 8001664:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001666:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001668:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800166a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800166c:	2b00      	cmp	r3, #0
 800166e:	d101      	bne.n	8001674 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001670:	2320      	movs	r3, #32
 8001672:	e003      	b.n	800167c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001674:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001676:	fab3 f383 	clz	r3, r3
 800167a:	b2db      	uxtb	r3, r3
 800167c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001686:	2b00      	cmp	r3, #0
 8001688:	d105      	bne.n	8001696 <HAL_ADC_ConfigChannel+0x3de>
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	0e9b      	lsrs	r3, r3, #26
 8001690:	f003 031f 	and.w	r3, r3, #31
 8001694:	e011      	b.n	80016ba <HAL_ADC_ConfigChannel+0x402>
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800169e:	fa93 f3a3 	rbit	r3, r3
 80016a2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80016a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80016a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80016a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80016ae:	2320      	movs	r3, #32
 80016b0:	e003      	b.n	80016ba <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80016b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016b4:	fab3 f383 	clz	r3, r3
 80016b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d106      	bne.n	80016cc <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2200      	movs	r2, #0
 80016c4:	2103      	movs	r1, #3
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fb82 	bl	8000dd0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fc61 	bl	8000f98 <LL_ADC_IsEnabled>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f040 813f 	bne.w	800195c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6818      	ldr	r0, [r3, #0]
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	6819      	ldr	r1, [r3, #0]
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	461a      	mov	r2, r3
 80016ec:	f7ff fbe2 	bl	8000eb4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	4a8e      	ldr	r2, [pc, #568]	; (8001930 <HAL_ADC_ConfigChannel+0x678>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	f040 8130 	bne.w	800195c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001708:	2b00      	cmp	r3, #0
 800170a:	d10b      	bne.n	8001724 <HAL_ADC_ConfigChannel+0x46c>
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	0e9b      	lsrs	r3, r3, #26
 8001712:	3301      	adds	r3, #1
 8001714:	f003 031f 	and.w	r3, r3, #31
 8001718:	2b09      	cmp	r3, #9
 800171a:	bf94      	ite	ls
 800171c:	2301      	movls	r3, #1
 800171e:	2300      	movhi	r3, #0
 8001720:	b2db      	uxtb	r3, r3
 8001722:	e019      	b.n	8001758 <HAL_ADC_ConfigChannel+0x4a0>
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800172c:	fa93 f3a3 	rbit	r3, r3
 8001730:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001732:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001734:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001736:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001738:	2b00      	cmp	r3, #0
 800173a:	d101      	bne.n	8001740 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800173c:	2320      	movs	r3, #32
 800173e:	e003      	b.n	8001748 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001740:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001742:	fab3 f383 	clz	r3, r3
 8001746:	b2db      	uxtb	r3, r3
 8001748:	3301      	adds	r3, #1
 800174a:	f003 031f 	and.w	r3, r3, #31
 800174e:	2b09      	cmp	r3, #9
 8001750:	bf94      	ite	ls
 8001752:	2301      	movls	r3, #1
 8001754:	2300      	movhi	r3, #0
 8001756:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001758:	2b00      	cmp	r3, #0
 800175a:	d079      	beq.n	8001850 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001764:	2b00      	cmp	r3, #0
 8001766:	d107      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x4c0>
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	0e9b      	lsrs	r3, r3, #26
 800176e:	3301      	adds	r3, #1
 8001770:	069b      	lsls	r3, r3, #26
 8001772:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001776:	e015      	b.n	80017a4 <HAL_ADC_ConfigChannel+0x4ec>
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001780:	fa93 f3a3 	rbit	r3, r3
 8001784:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001788:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800178a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800178c:	2b00      	cmp	r3, #0
 800178e:	d101      	bne.n	8001794 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001790:	2320      	movs	r3, #32
 8001792:	e003      	b.n	800179c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001796:	fab3 f383 	clz	r3, r3
 800179a:	b2db      	uxtb	r3, r3
 800179c:	3301      	adds	r3, #1
 800179e:	069b      	lsls	r3, r3, #26
 80017a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d109      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x50c>
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	0e9b      	lsrs	r3, r3, #26
 80017b6:	3301      	adds	r3, #1
 80017b8:	f003 031f 	and.w	r3, r3, #31
 80017bc:	2101      	movs	r1, #1
 80017be:	fa01 f303 	lsl.w	r3, r1, r3
 80017c2:	e017      	b.n	80017f4 <HAL_ADC_ConfigChannel+0x53c>
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017cc:	fa93 f3a3 	rbit	r3, r3
 80017d0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80017d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017d4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80017d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80017dc:	2320      	movs	r3, #32
 80017de:	e003      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80017e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017e2:	fab3 f383 	clz	r3, r3
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	3301      	adds	r3, #1
 80017ea:	f003 031f 	and.w	r3, r3, #31
 80017ee:	2101      	movs	r1, #1
 80017f0:	fa01 f303 	lsl.w	r3, r1, r3
 80017f4:	ea42 0103 	orr.w	r1, r2, r3
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001800:	2b00      	cmp	r3, #0
 8001802:	d10a      	bne.n	800181a <HAL_ADC_ConfigChannel+0x562>
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	0e9b      	lsrs	r3, r3, #26
 800180a:	3301      	adds	r3, #1
 800180c:	f003 021f 	and.w	r2, r3, #31
 8001810:	4613      	mov	r3, r2
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	4413      	add	r3, r2
 8001816:	051b      	lsls	r3, r3, #20
 8001818:	e018      	b.n	800184c <HAL_ADC_ConfigChannel+0x594>
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001822:	fa93 f3a3 	rbit	r3, r3
 8001826:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800182a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800182c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001832:	2320      	movs	r3, #32
 8001834:	e003      	b.n	800183e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001838:	fab3 f383 	clz	r3, r3
 800183c:	b2db      	uxtb	r3, r3
 800183e:	3301      	adds	r3, #1
 8001840:	f003 021f 	and.w	r2, r3, #31
 8001844:	4613      	mov	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4413      	add	r3, r2
 800184a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800184c:	430b      	orrs	r3, r1
 800184e:	e080      	b.n	8001952 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001858:	2b00      	cmp	r3, #0
 800185a:	d107      	bne.n	800186c <HAL_ADC_ConfigChannel+0x5b4>
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	0e9b      	lsrs	r3, r3, #26
 8001862:	3301      	adds	r3, #1
 8001864:	069b      	lsls	r3, r3, #26
 8001866:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800186a:	e015      	b.n	8001898 <HAL_ADC_ConfigChannel+0x5e0>
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001874:	fa93 f3a3 	rbit	r3, r3
 8001878:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800187a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800187c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800187e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001880:	2b00      	cmp	r3, #0
 8001882:	d101      	bne.n	8001888 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001884:	2320      	movs	r3, #32
 8001886:	e003      	b.n	8001890 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800188a:	fab3 f383 	clz	r3, r3
 800188e:	b2db      	uxtb	r3, r3
 8001890:	3301      	adds	r3, #1
 8001892:	069b      	lsls	r3, r3, #26
 8001894:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d109      	bne.n	80018b8 <HAL_ADC_ConfigChannel+0x600>
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	0e9b      	lsrs	r3, r3, #26
 80018aa:	3301      	adds	r3, #1
 80018ac:	f003 031f 	and.w	r3, r3, #31
 80018b0:	2101      	movs	r1, #1
 80018b2:	fa01 f303 	lsl.w	r3, r1, r3
 80018b6:	e017      	b.n	80018e8 <HAL_ADC_ConfigChannel+0x630>
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018be:	6a3b      	ldr	r3, [r7, #32]
 80018c0:	fa93 f3a3 	rbit	r3, r3
 80018c4:	61fb      	str	r3, [r7, #28]
  return result;
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80018d0:	2320      	movs	r3, #32
 80018d2:	e003      	b.n	80018dc <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	fab3 f383 	clz	r3, r3
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	3301      	adds	r3, #1
 80018de:	f003 031f 	and.w	r3, r3, #31
 80018e2:	2101      	movs	r1, #1
 80018e4:	fa01 f303 	lsl.w	r3, r1, r3
 80018e8:	ea42 0103 	orr.w	r1, r2, r3
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10d      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x65c>
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	0e9b      	lsrs	r3, r3, #26
 80018fe:	3301      	adds	r3, #1
 8001900:	f003 021f 	and.w	r2, r3, #31
 8001904:	4613      	mov	r3, r2
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	4413      	add	r3, r2
 800190a:	3b1e      	subs	r3, #30
 800190c:	051b      	lsls	r3, r3, #20
 800190e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001912:	e01d      	b.n	8001950 <HAL_ADC_ConfigChannel+0x698>
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	fa93 f3a3 	rbit	r3, r3
 8001920:	613b      	str	r3, [r7, #16]
  return result;
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d103      	bne.n	8001934 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800192c:	2320      	movs	r3, #32
 800192e:	e005      	b.n	800193c <HAL_ADC_ConfigChannel+0x684>
 8001930:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	fab3 f383 	clz	r3, r3
 800193a:	b2db      	uxtb	r3, r3
 800193c:	3301      	adds	r3, #1
 800193e:	f003 021f 	and.w	r2, r3, #31
 8001942:	4613      	mov	r3, r2
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4413      	add	r3, r2
 8001948:	3b1e      	subs	r3, #30
 800194a:	051b      	lsls	r3, r3, #20
 800194c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001950:	430b      	orrs	r3, r1
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	6892      	ldr	r2, [r2, #8]
 8001956:	4619      	mov	r1, r3
 8001958:	f7ff fa81 	bl	8000e5e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4b44      	ldr	r3, [pc, #272]	; (8001a74 <HAL_ADC_ConfigChannel+0x7bc>)
 8001962:	4013      	ands	r3, r2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d07a      	beq.n	8001a5e <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001968:	4843      	ldr	r0, [pc, #268]	; (8001a78 <HAL_ADC_ConfigChannel+0x7c0>)
 800196a:	f7ff f9e9 	bl	8000d40 <LL_ADC_GetCommonPathInternalCh>
 800196e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a41      	ldr	r2, [pc, #260]	; (8001a7c <HAL_ADC_ConfigChannel+0x7c4>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d12c      	bne.n	80019d6 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800197c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001980:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d126      	bne.n	80019d6 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a3c      	ldr	r2, [pc, #240]	; (8001a80 <HAL_ADC_ConfigChannel+0x7c8>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d004      	beq.n	800199c <HAL_ADC_ConfigChannel+0x6e4>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a3b      	ldr	r2, [pc, #236]	; (8001a84 <HAL_ADC_ConfigChannel+0x7cc>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d15d      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800199c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80019a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019a4:	4619      	mov	r1, r3
 80019a6:	4834      	ldr	r0, [pc, #208]	; (8001a78 <HAL_ADC_ConfigChannel+0x7c0>)
 80019a8:	f7ff f9b7 	bl	8000d1a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019ac:	4b36      	ldr	r3, [pc, #216]	; (8001a88 <HAL_ADC_ConfigChannel+0x7d0>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	099b      	lsrs	r3, r3, #6
 80019b2:	4a36      	ldr	r2, [pc, #216]	; (8001a8c <HAL_ADC_ConfigChannel+0x7d4>)
 80019b4:	fba2 2303 	umull	r2, r3, r2, r3
 80019b8:	099b      	lsrs	r3, r3, #6
 80019ba:	1c5a      	adds	r2, r3, #1
 80019bc:	4613      	mov	r3, r2
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	4413      	add	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80019c6:	e002      	b.n	80019ce <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1f9      	bne.n	80019c8 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80019d4:	e040      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a2d      	ldr	r2, [pc, #180]	; (8001a90 <HAL_ADC_ConfigChannel+0x7d8>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d118      	bne.n	8001a12 <HAL_ADC_ConfigChannel+0x75a>
 80019e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80019e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d112      	bne.n	8001a12 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a23      	ldr	r2, [pc, #140]	; (8001a80 <HAL_ADC_ConfigChannel+0x7c8>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d004      	beq.n	8001a00 <HAL_ADC_ConfigChannel+0x748>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a22      	ldr	r2, [pc, #136]	; (8001a84 <HAL_ADC_ConfigChannel+0x7cc>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d12d      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a08:	4619      	mov	r1, r3
 8001a0a:	481b      	ldr	r0, [pc, #108]	; (8001a78 <HAL_ADC_ConfigChannel+0x7c0>)
 8001a0c:	f7ff f985 	bl	8000d1a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001a10:	e024      	b.n	8001a5c <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a1f      	ldr	r2, [pc, #124]	; (8001a94 <HAL_ADC_ConfigChannel+0x7dc>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d120      	bne.n	8001a5e <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001a1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d11a      	bne.n	8001a5e <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a14      	ldr	r2, [pc, #80]	; (8001a80 <HAL_ADC_ConfigChannel+0x7c8>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d115      	bne.n	8001a5e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a36:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	480e      	ldr	r0, [pc, #56]	; (8001a78 <HAL_ADC_ConfigChannel+0x7c0>)
 8001a3e:	f7ff f96c 	bl	8000d1a <LL_ADC_SetCommonPathInternalCh>
 8001a42:	e00c      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a48:	f043 0220 	orr.w	r2, r3, #32
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001a56:	e002      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a58:	bf00      	nop
 8001a5a:	e000      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001a5c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001a66:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	37d8      	adds	r7, #216	; 0xd8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	80080000 	.word	0x80080000
 8001a78:	50040300 	.word	0x50040300
 8001a7c:	c7520000 	.word	0xc7520000
 8001a80:	50040000 	.word	0x50040000
 8001a84:	50040200 	.word	0x50040200
 8001a88:	20000000 	.word	0x20000000
 8001a8c:	053e2d63 	.word	0x053e2d63
 8001a90:	cb840000 	.word	0xcb840000
 8001a94:	80000001 	.word	0x80000001

08001a98 <LL_ADC_IsEnabled>:
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d101      	bne.n	8001ab0 <LL_ADC_IsEnabled+0x18>
 8001aac:	2301      	movs	r3, #1
 8001aae:	e000      	b.n	8001ab2 <LL_ADC_IsEnabled+0x1a>
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <LL_ADC_REG_IsConversionOngoing>:
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 0304 	and.w	r3, r3, #4
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	d101      	bne.n	8001ad6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001ae4:	b590      	push	{r4, r7, lr}
 8001ae6:	b09f      	sub	sp, #124	; 0x7c
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d101      	bne.n	8001b02 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001afe:	2302      	movs	r3, #2
 8001b00:	e093      	b.n	8001c2a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2201      	movs	r2, #1
 8001b06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001b0e:	2300      	movs	r3, #0
 8001b10:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a47      	ldr	r2, [pc, #284]	; (8001c34 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d102      	bne.n	8001b22 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001b1c:	4b46      	ldr	r3, [pc, #280]	; (8001c38 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	e001      	b.n	8001b26 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001b22:	2300      	movs	r3, #0
 8001b24:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d10b      	bne.n	8001b44 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b30:	f043 0220 	orr.w	r2, r3, #32
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e072      	b.n	8001c2a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff ffb9 	bl	8001abe <LL_ADC_REG_IsConversionOngoing>
 8001b4c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff ffb3 	bl	8001abe <LL_ADC_REG_IsConversionOngoing>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d154      	bne.n	8001c08 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001b5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d151      	bne.n	8001c08 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001b64:	4b35      	ldr	r3, [pc, #212]	; (8001c3c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001b66:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d02c      	beq.n	8001bca <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001b70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	6859      	ldr	r1, [r3, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b82:	035b      	lsls	r3, r3, #13
 8001b84:	430b      	orrs	r3, r1
 8001b86:	431a      	orrs	r2, r3
 8001b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b8a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b8c:	4829      	ldr	r0, [pc, #164]	; (8001c34 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001b8e:	f7ff ff83 	bl	8001a98 <LL_ADC_IsEnabled>
 8001b92:	4604      	mov	r4, r0
 8001b94:	4828      	ldr	r0, [pc, #160]	; (8001c38 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001b96:	f7ff ff7f 	bl	8001a98 <LL_ADC_IsEnabled>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	431c      	orrs	r4, r3
 8001b9e:	4828      	ldr	r0, [pc, #160]	; (8001c40 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001ba0:	f7ff ff7a 	bl	8001a98 <LL_ADC_IsEnabled>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	4323      	orrs	r3, r4
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d137      	bne.n	8001c1c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001bb4:	f023 030f 	bic.w	r3, r3, #15
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	6811      	ldr	r1, [r2, #0]
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	6892      	ldr	r2, [r2, #8]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bc6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001bc8:	e028      	b.n	8001c1c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bd4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bd6:	4817      	ldr	r0, [pc, #92]	; (8001c34 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001bd8:	f7ff ff5e 	bl	8001a98 <LL_ADC_IsEnabled>
 8001bdc:	4604      	mov	r4, r0
 8001bde:	4816      	ldr	r0, [pc, #88]	; (8001c38 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001be0:	f7ff ff5a 	bl	8001a98 <LL_ADC_IsEnabled>
 8001be4:	4603      	mov	r3, r0
 8001be6:	431c      	orrs	r4, r3
 8001be8:	4815      	ldr	r0, [pc, #84]	; (8001c40 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001bea:	f7ff ff55 	bl	8001a98 <LL_ADC_IsEnabled>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	4323      	orrs	r3, r4
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d112      	bne.n	8001c1c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001bfe:	f023 030f 	bic.w	r3, r3, #15
 8001c02:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001c04:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c06:	e009      	b.n	8001c1c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c0c:	f043 0220 	orr.w	r2, r3, #32
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001c1a:	e000      	b.n	8001c1e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c1c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001c26:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	377c      	adds	r7, #124	; 0x7c
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd90      	pop	{r4, r7, pc}
 8001c32:	bf00      	nop
 8001c34:	50040000 	.word	0x50040000
 8001c38:	50040100 	.word	0x50040100
 8001c3c:	50040300 	.word	0x50040300
 8001c40:	50040200 	.word	0x50040200

08001c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c54:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <__NVIC_SetPriorityGrouping+0x44>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c60:	4013      	ands	r3, r2
 8001c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c76:	4a04      	ldr	r2, [pc, #16]	; (8001c88 <__NVIC_SetPriorityGrouping+0x44>)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	60d3      	str	r3, [r2, #12]
}
 8001c7c:	bf00      	nop
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c90:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	0a1b      	lsrs	r3, r3, #8
 8001c96:	f003 0307 	and.w	r3, r3, #7
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	db0b      	blt.n	8001cd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	f003 021f 	and.w	r2, r3, #31
 8001cc0:	4907      	ldr	r1, [pc, #28]	; (8001ce0 <__NVIC_EnableIRQ+0x38>)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	095b      	lsrs	r3, r3, #5
 8001cc8:	2001      	movs	r0, #1
 8001cca:	fa00 f202 	lsl.w	r2, r0, r2
 8001cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	e000e100 	.word	0xe000e100

08001ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	6039      	str	r1, [r7, #0]
 8001cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	db0a      	blt.n	8001d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	490c      	ldr	r1, [pc, #48]	; (8001d30 <__NVIC_SetPriority+0x4c>)
 8001cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d02:	0112      	lsls	r2, r2, #4
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	440b      	add	r3, r1
 8001d08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d0c:	e00a      	b.n	8001d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	4908      	ldr	r1, [pc, #32]	; (8001d34 <__NVIC_SetPriority+0x50>)
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	3b04      	subs	r3, #4
 8001d1c:	0112      	lsls	r2, r2, #4
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	440b      	add	r3, r1
 8001d22:	761a      	strb	r2, [r3, #24]
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000e100 	.word	0xe000e100
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b089      	sub	sp, #36	; 0x24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f1c3 0307 	rsb	r3, r3, #7
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	bf28      	it	cs
 8001d56:	2304      	movcs	r3, #4
 8001d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	2b06      	cmp	r3, #6
 8001d60:	d902      	bls.n	8001d68 <NVIC_EncodePriority+0x30>
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	3b03      	subs	r3, #3
 8001d66:	e000      	b.n	8001d6a <NVIC_EncodePriority+0x32>
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43da      	mvns	r2, r3
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	401a      	ands	r2, r3
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d80:	f04f 31ff 	mov.w	r1, #4294967295
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8a:	43d9      	mvns	r1, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d90:	4313      	orrs	r3, r2
         );
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3724      	adds	r7, #36	; 0x24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
	...

08001da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001db0:	d301      	bcc.n	8001db6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001db2:	2301      	movs	r3, #1
 8001db4:	e00f      	b.n	8001dd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001db6:	4a0a      	ldr	r2, [pc, #40]	; (8001de0 <SysTick_Config+0x40>)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dbe:	210f      	movs	r1, #15
 8001dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc4:	f7ff ff8e 	bl	8001ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <SysTick_Config+0x40>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dce:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <SysTick_Config+0x40>)
 8001dd0:	2207      	movs	r2, #7
 8001dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	e000e010 	.word	0xe000e010

08001de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7ff ff29 	bl	8001c44 <__NVIC_SetPriorityGrouping>
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b086      	sub	sp, #24
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	4603      	mov	r3, r0
 8001e02:	60b9      	str	r1, [r7, #8]
 8001e04:	607a      	str	r2, [r7, #4]
 8001e06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e0c:	f7ff ff3e 	bl	8001c8c <__NVIC_GetPriorityGrouping>
 8001e10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	68b9      	ldr	r1, [r7, #8]
 8001e16:	6978      	ldr	r0, [r7, #20]
 8001e18:	f7ff ff8e 	bl	8001d38 <NVIC_EncodePriority>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e22:	4611      	mov	r1, r2
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff ff5d 	bl	8001ce4 <__NVIC_SetPriority>
}
 8001e2a:	bf00      	nop
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	4603      	mov	r3, r0
 8001e3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff ff31 	bl	8001ca8 <__NVIC_EnableIRQ>
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff ffa2 	bl	8001da0 <SysTick_Config>
 8001e5c:	4603      	mov	r3, r0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
	...

08001e68 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e098      	b.n	8001fac <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	4b4d      	ldr	r3, [pc, #308]	; (8001fb8 <HAL_DMA_Init+0x150>)
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d80f      	bhi.n	8001ea6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	4b4b      	ldr	r3, [pc, #300]	; (8001fbc <HAL_DMA_Init+0x154>)
 8001e8e:	4413      	add	r3, r2
 8001e90:	4a4b      	ldr	r2, [pc, #300]	; (8001fc0 <HAL_DMA_Init+0x158>)
 8001e92:	fba2 2303 	umull	r2, r3, r2, r3
 8001e96:	091b      	lsrs	r3, r3, #4
 8001e98:	009a      	lsls	r2, r3, #2
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a48      	ldr	r2, [pc, #288]	; (8001fc4 <HAL_DMA_Init+0x15c>)
 8001ea2:	641a      	str	r2, [r3, #64]	; 0x40
 8001ea4:	e00e      	b.n	8001ec4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4b46      	ldr	r3, [pc, #280]	; (8001fc8 <HAL_DMA_Init+0x160>)
 8001eae:	4413      	add	r3, r2
 8001eb0:	4a43      	ldr	r2, [pc, #268]	; (8001fc0 <HAL_DMA_Init+0x158>)
 8001eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb6:	091b      	lsrs	r3, r3, #4
 8001eb8:	009a      	lsls	r2, r3, #2
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a42      	ldr	r2, [pc, #264]	; (8001fcc <HAL_DMA_Init+0x164>)
 8001ec2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ede:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001ee8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ef4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f1e:	d039      	beq.n	8001f94 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	4a27      	ldr	r2, [pc, #156]	; (8001fc4 <HAL_DMA_Init+0x15c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d11a      	bne.n	8001f60 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001f2a:	4b29      	ldr	r3, [pc, #164]	; (8001fd0 <HAL_DMA_Init+0x168>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f32:	f003 031c 	and.w	r3, r3, #28
 8001f36:	210f      	movs	r1, #15
 8001f38:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	4924      	ldr	r1, [pc, #144]	; (8001fd0 <HAL_DMA_Init+0x168>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001f44:	4b22      	ldr	r3, [pc, #136]	; (8001fd0 <HAL_DMA_Init+0x168>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6859      	ldr	r1, [r3, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f50:	f003 031c 	and.w	r3, r3, #28
 8001f54:	fa01 f303 	lsl.w	r3, r1, r3
 8001f58:	491d      	ldr	r1, [pc, #116]	; (8001fd0 <HAL_DMA_Init+0x168>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	600b      	str	r3, [r1, #0]
 8001f5e:	e019      	b.n	8001f94 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001f60:	4b1c      	ldr	r3, [pc, #112]	; (8001fd4 <HAL_DMA_Init+0x16c>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f68:	f003 031c 	and.w	r3, r3, #28
 8001f6c:	210f      	movs	r1, #15
 8001f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f72:	43db      	mvns	r3, r3
 8001f74:	4917      	ldr	r1, [pc, #92]	; (8001fd4 <HAL_DMA_Init+0x16c>)
 8001f76:	4013      	ands	r3, r2
 8001f78:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001f7a:	4b16      	ldr	r3, [pc, #88]	; (8001fd4 <HAL_DMA_Init+0x16c>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6859      	ldr	r1, [r3, #4]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f86:	f003 031c 	and.w	r3, r3, #28
 8001f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8e:	4911      	ldr	r1, [pc, #68]	; (8001fd4 <HAL_DMA_Init+0x16c>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	40020407 	.word	0x40020407
 8001fbc:	bffdfff8 	.word	0xbffdfff8
 8001fc0:	cccccccd 	.word	0xcccccccd
 8001fc4:	40020000 	.word	0x40020000
 8001fc8:	bffdfbf8 	.word	0xbffdfbf8
 8001fcc:	40020400 	.word	0x40020400
 8001fd0:	400200a8 	.word	0x400200a8
 8001fd4:	400204a8 	.word	0x400204a8

08001fd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
 8001fe4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d101      	bne.n	8001ff8 <HAL_DMA_Start_IT+0x20>
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	e04b      	b.n	8002090 <HAL_DMA_Start_IT+0xb8>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b01      	cmp	r3, #1
 800200a:	d13a      	bne.n	8002082 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2202      	movs	r2, #2
 8002010:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 0201 	bic.w	r2, r2, #1
 8002028:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	68b9      	ldr	r1, [r7, #8]
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f000 f929 	bl	8002288 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	2b00      	cmp	r3, #0
 800203c:	d008      	beq.n	8002050 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f042 020e 	orr.w	r2, r2, #14
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	e00f      	b.n	8002070 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0204 	bic.w	r2, r2, #4
 800205e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f042 020a 	orr.w	r2, r2, #10
 800206e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f042 0201 	orr.w	r2, r2, #1
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	e005      	b.n	800208e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800208a:	2302      	movs	r3, #2
 800208c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800208e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b4:	f003 031c 	and.w	r3, r3, #28
 80020b8:	2204      	movs	r2, #4
 80020ba:	409a      	lsls	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4013      	ands	r3, r2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d026      	beq.n	8002112 <HAL_DMA_IRQHandler+0x7a>
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	f003 0304 	and.w	r3, r3, #4
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d021      	beq.n	8002112 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0320 	and.w	r3, r3, #32
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d107      	bne.n	80020ec <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 0204 	bic.w	r2, r2, #4
 80020ea:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f0:	f003 021c 	and.w	r2, r3, #28
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	2104      	movs	r1, #4
 80020fa:	fa01 f202 	lsl.w	r2, r1, r2
 80020fe:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002104:	2b00      	cmp	r3, #0
 8002106:	d071      	beq.n	80021ec <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002110:	e06c      	b.n	80021ec <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002116:	f003 031c 	and.w	r3, r3, #28
 800211a:	2202      	movs	r2, #2
 800211c:	409a      	lsls	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	4013      	ands	r3, r2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d02e      	beq.n	8002184 <HAL_DMA_IRQHandler+0xec>
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d029      	beq.n	8002184 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0320 	and.w	r3, r3, #32
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10b      	bne.n	8002156 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 020a 	bic.w	r2, r2, #10
 800214c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215a:	f003 021c 	and.w	r2, r3, #28
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	2102      	movs	r1, #2
 8002164:	fa01 f202 	lsl.w	r2, r1, r2
 8002168:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002176:	2b00      	cmp	r3, #0
 8002178:	d038      	beq.n	80021ec <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002182:	e033      	b.n	80021ec <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002188:	f003 031c 	and.w	r3, r3, #28
 800218c:	2208      	movs	r2, #8
 800218e:	409a      	lsls	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4013      	ands	r3, r2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d02a      	beq.n	80021ee <HAL_DMA_IRQHandler+0x156>
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d025      	beq.n	80021ee <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 020e 	bic.w	r2, r2, #14
 80021b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	f003 021c 	and.w	r2, r3, #28
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	2101      	movs	r1, #1
 80021c0:	fa01 f202 	lsl.w	r2, r1, r2
 80021c4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2201      	movs	r2, #1
 80021ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d004      	beq.n	80021ee <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80021ec:	bf00      	nop
 80021ee:	bf00      	nop
}
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 80021f8:	b480      	push	{r7}
 80021fa:	b087      	sub	sp, #28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	460b      	mov	r3, r1
 8002202:	607a      	str	r2, [r7, #4]
 8002204:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002210:	2b01      	cmp	r3, #1
 8002212:	d101      	bne.n	8002218 <HAL_DMA_RegisterCallback+0x20>
 8002214:	2302      	movs	r3, #2
 8002216:	e031      	b.n	800227c <HAL_DMA_RegisterCallback+0x84>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b01      	cmp	r3, #1
 800222a:	d120      	bne.n	800226e <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 800222c:	7afb      	ldrb	r3, [r7, #11]
 800222e:	2b03      	cmp	r3, #3
 8002230:	d81a      	bhi.n	8002268 <HAL_DMA_RegisterCallback+0x70>
 8002232:	a201      	add	r2, pc, #4	; (adr r2, 8002238 <HAL_DMA_RegisterCallback+0x40>)
 8002234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002238:	08002249 	.word	0x08002249
 800223c:	08002251 	.word	0x08002251
 8002240:	08002259 	.word	0x08002259
 8002244:	08002261 	.word	0x08002261
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = pCallback;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	62da      	str	r2, [r3, #44]	; 0x2c
           break;
 800224e:	e010      	b.n	8002272 <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = pCallback;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	631a      	str	r2, [r3, #48]	; 0x30
           break;
 8002256:	e00c      	b.n	8002272 <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = pCallback;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 800225e:	e008      	b.n	8002272 <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = pCallback;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 8002266:	e004      	b.n	8002272 <HAL_DMA_RegisterCallback+0x7a>

     default:
           status = HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	75fb      	strb	r3, [r7, #23]
           break;
 800226c:	e001      	b.n	8002272 <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800227a:	7dfb      	ldrb	r3, [r7, #23]
}
 800227c:	4618      	mov	r0, r3
 800227e:	371c      	adds	r7, #28
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
 8002294:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229a:	f003 021c 	and.w	r2, r3, #28
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	2101      	movs	r1, #1
 80022a4:	fa01 f202 	lsl.w	r2, r1, r2
 80022a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	2b10      	cmp	r3, #16
 80022b8:	d108      	bne.n	80022cc <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80022ca:	e007      	b.n	80022dc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	60da      	str	r2, [r3, #12]
}
 80022dc:	bf00      	nop
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b087      	sub	sp, #28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022f6:	e17f      	b.n	80025f8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	2101      	movs	r1, #1
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	fa01 f303 	lsl.w	r3, r1, r3
 8002304:	4013      	ands	r3, r2
 8002306:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 8171 	beq.w	80025f2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	2b01      	cmp	r3, #1
 800231a:	d005      	beq.n	8002328 <HAL_GPIO_Init+0x40>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 0303 	and.w	r3, r3, #3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d130      	bne.n	800238a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	2203      	movs	r2, #3
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4013      	ands	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	68da      	ldr	r2, [r3, #12]
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	4313      	orrs	r3, r2
 8002350:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800235e:	2201      	movs	r2, #1
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	4013      	ands	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	091b      	lsrs	r3, r3, #4
 8002374:	f003 0201 	and.w	r2, r3, #1
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	2b03      	cmp	r3, #3
 8002394:	d118      	bne.n	80023c8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800239c:	2201      	movs	r2, #1
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	4013      	ands	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	08db      	lsrs	r3, r3, #3
 80023b2:	f003 0201 	and.w	r2, r3, #1
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	4313      	orrs	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 0303 	and.w	r3, r3, #3
 80023d0:	2b03      	cmp	r3, #3
 80023d2:	d017      	beq.n	8002404 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	2203      	movs	r2, #3
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	4013      	ands	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d123      	bne.n	8002458 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	08da      	lsrs	r2, r3, #3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3208      	adds	r2, #8
 8002418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800241c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	220f      	movs	r2, #15
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43db      	mvns	r3, r3
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	4013      	ands	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	691a      	ldr	r2, [r3, #16]
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4313      	orrs	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	08da      	lsrs	r2, r3, #3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3208      	adds	r2, #8
 8002452:	6939      	ldr	r1, [r7, #16]
 8002454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	2203      	movs	r2, #3
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	4013      	ands	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 0203 	and.w	r2, r3, #3
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	4313      	orrs	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 80ac 	beq.w	80025f2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800249a:	4b5f      	ldr	r3, [pc, #380]	; (8002618 <HAL_GPIO_Init+0x330>)
 800249c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800249e:	4a5e      	ldr	r2, [pc, #376]	; (8002618 <HAL_GPIO_Init+0x330>)
 80024a0:	f043 0301 	orr.w	r3, r3, #1
 80024a4:	6613      	str	r3, [r2, #96]	; 0x60
 80024a6:	4b5c      	ldr	r3, [pc, #368]	; (8002618 <HAL_GPIO_Init+0x330>)
 80024a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	60bb      	str	r3, [r7, #8]
 80024b0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024b2:	4a5a      	ldr	r2, [pc, #360]	; (800261c <HAL_GPIO_Init+0x334>)
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	089b      	lsrs	r3, r3, #2
 80024b8:	3302      	adds	r3, #2
 80024ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024be:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	220f      	movs	r2, #15
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	43db      	mvns	r3, r3
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	4013      	ands	r3, r2
 80024d4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024dc:	d025      	beq.n	800252a <HAL_GPIO_Init+0x242>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a4f      	ldr	r2, [pc, #316]	; (8002620 <HAL_GPIO_Init+0x338>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d01f      	beq.n	8002526 <HAL_GPIO_Init+0x23e>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a4e      	ldr	r2, [pc, #312]	; (8002624 <HAL_GPIO_Init+0x33c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d019      	beq.n	8002522 <HAL_GPIO_Init+0x23a>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a4d      	ldr	r2, [pc, #308]	; (8002628 <HAL_GPIO_Init+0x340>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d013      	beq.n	800251e <HAL_GPIO_Init+0x236>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a4c      	ldr	r2, [pc, #304]	; (800262c <HAL_GPIO_Init+0x344>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d00d      	beq.n	800251a <HAL_GPIO_Init+0x232>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a4b      	ldr	r2, [pc, #300]	; (8002630 <HAL_GPIO_Init+0x348>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d007      	beq.n	8002516 <HAL_GPIO_Init+0x22e>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a4a      	ldr	r2, [pc, #296]	; (8002634 <HAL_GPIO_Init+0x34c>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d101      	bne.n	8002512 <HAL_GPIO_Init+0x22a>
 800250e:	2306      	movs	r3, #6
 8002510:	e00c      	b.n	800252c <HAL_GPIO_Init+0x244>
 8002512:	2307      	movs	r3, #7
 8002514:	e00a      	b.n	800252c <HAL_GPIO_Init+0x244>
 8002516:	2305      	movs	r3, #5
 8002518:	e008      	b.n	800252c <HAL_GPIO_Init+0x244>
 800251a:	2304      	movs	r3, #4
 800251c:	e006      	b.n	800252c <HAL_GPIO_Init+0x244>
 800251e:	2303      	movs	r3, #3
 8002520:	e004      	b.n	800252c <HAL_GPIO_Init+0x244>
 8002522:	2302      	movs	r3, #2
 8002524:	e002      	b.n	800252c <HAL_GPIO_Init+0x244>
 8002526:	2301      	movs	r3, #1
 8002528:	e000      	b.n	800252c <HAL_GPIO_Init+0x244>
 800252a:	2300      	movs	r3, #0
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	f002 0203 	and.w	r2, r2, #3
 8002532:	0092      	lsls	r2, r2, #2
 8002534:	4093      	lsls	r3, r2
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4313      	orrs	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800253c:	4937      	ldr	r1, [pc, #220]	; (800261c <HAL_GPIO_Init+0x334>)
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	089b      	lsrs	r3, r3, #2
 8002542:	3302      	adds	r3, #2
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800254a:	4b3b      	ldr	r3, [pc, #236]	; (8002638 <HAL_GPIO_Init+0x350>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	43db      	mvns	r3, r3
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	4013      	ands	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4313      	orrs	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800256e:	4a32      	ldr	r2, [pc, #200]	; (8002638 <HAL_GPIO_Init+0x350>)
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002574:	4b30      	ldr	r3, [pc, #192]	; (8002638 <HAL_GPIO_Init+0x350>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	43db      	mvns	r3, r3
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	4013      	ands	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d003      	beq.n	8002598 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	4313      	orrs	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002598:	4a27      	ldr	r2, [pc, #156]	; (8002638 <HAL_GPIO_Init+0x350>)
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800259e:	4b26      	ldr	r3, [pc, #152]	; (8002638 <HAL_GPIO_Init+0x350>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	43db      	mvns	r3, r3
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	4013      	ands	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4313      	orrs	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025c2:	4a1d      	ldr	r2, [pc, #116]	; (8002638 <HAL_GPIO_Init+0x350>)
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80025c8:	4b1b      	ldr	r3, [pc, #108]	; (8002638 <HAL_GPIO_Init+0x350>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	43db      	mvns	r3, r3
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	4013      	ands	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d003      	beq.n	80025ec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025ec:	4a12      	ldr	r2, [pc, #72]	; (8002638 <HAL_GPIO_Init+0x350>)
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	3301      	adds	r3, #1
 80025f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	f47f ae78 	bne.w	80022f8 <HAL_GPIO_Init+0x10>
  }
}
 8002608:	bf00      	nop
 800260a:	bf00      	nop
 800260c:	371c      	adds	r7, #28
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000
 800261c:	40010000 	.word	0x40010000
 8002620:	48000400 	.word	0x48000400
 8002624:	48000800 	.word	0x48000800
 8002628:	48000c00 	.word	0x48000c00
 800262c:	48001000 	.word	0x48001000
 8002630:	48001400 	.word	0x48001400
 8002634:	48001800 	.word	0x48001800
 8002638:	40010400 	.word	0x40010400

0800263c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	807b      	strh	r3, [r7, #2]
 8002648:	4613      	mov	r3, r2
 800264a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800264c:	787b      	ldrb	r3, [r7, #1]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002652:	887a      	ldrh	r2, [r7, #2]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002658:	e002      	b.n	8002660 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800265a:	887a      	ldrh	r2, [r7, #2]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002670:	4b04      	ldr	r3, [pc, #16]	; (8002684 <HAL_PWREx_GetVoltageRange+0x18>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002678:	4618      	mov	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40007000 	.word	0x40007000

08002688 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002696:	d130      	bne.n	80026fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002698:	4b23      	ldr	r3, [pc, #140]	; (8002728 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026a4:	d038      	beq.n	8002718 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026a6:	4b20      	ldr	r3, [pc, #128]	; (8002728 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026ae:	4a1e      	ldr	r2, [pc, #120]	; (8002728 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026b6:	4b1d      	ldr	r3, [pc, #116]	; (800272c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2232      	movs	r2, #50	; 0x32
 80026bc:	fb02 f303 	mul.w	r3, r2, r3
 80026c0:	4a1b      	ldr	r2, [pc, #108]	; (8002730 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80026c2:	fba2 2303 	umull	r2, r3, r2, r3
 80026c6:	0c9b      	lsrs	r3, r3, #18
 80026c8:	3301      	adds	r3, #1
 80026ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026cc:	e002      	b.n	80026d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	3b01      	subs	r3, #1
 80026d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026d4:	4b14      	ldr	r3, [pc, #80]	; (8002728 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026e0:	d102      	bne.n	80026e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1f2      	bne.n	80026ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026e8:	4b0f      	ldr	r3, [pc, #60]	; (8002728 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026f4:	d110      	bne.n	8002718 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e00f      	b.n	800271a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80026fa:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002706:	d007      	beq.n	8002718 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002708:	4b07      	ldr	r3, [pc, #28]	; (8002728 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002710:	4a05      	ldr	r2, [pc, #20]	; (8002728 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002712:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002716:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	40007000 	.word	0x40007000
 800272c:	20000000 	.word	0x20000000
 8002730:	431bde83 	.word	0x431bde83

08002734 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b088      	sub	sp, #32
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e3ca      	b.n	8002edc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002746:	4b97      	ldr	r3, [pc, #604]	; (80029a4 <HAL_RCC_OscConfig+0x270>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 030c 	and.w	r3, r3, #12
 800274e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002750:	4b94      	ldr	r3, [pc, #592]	; (80029a4 <HAL_RCC_OscConfig+0x270>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f003 0303 	and.w	r3, r3, #3
 8002758:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0310 	and.w	r3, r3, #16
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 80e4 	beq.w	8002930 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d007      	beq.n	800277e <HAL_RCC_OscConfig+0x4a>
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	2b0c      	cmp	r3, #12
 8002772:	f040 808b 	bne.w	800288c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	2b01      	cmp	r3, #1
 800277a:	f040 8087 	bne.w	800288c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800277e:	4b89      	ldr	r3, [pc, #548]	; (80029a4 <HAL_RCC_OscConfig+0x270>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d005      	beq.n	8002796 <HAL_RCC_OscConfig+0x62>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e3a2      	b.n	8002edc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a1a      	ldr	r2, [r3, #32]
 800279a:	4b82      	ldr	r3, [pc, #520]	; (80029a4 <HAL_RCC_OscConfig+0x270>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d004      	beq.n	80027b0 <HAL_RCC_OscConfig+0x7c>
 80027a6:	4b7f      	ldr	r3, [pc, #508]	; (80029a4 <HAL_RCC_OscConfig+0x270>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027ae:	e005      	b.n	80027bc <HAL_RCC_OscConfig+0x88>
 80027b0:	4b7c      	ldr	r3, [pc, #496]	; (80029a4 <HAL_RCC_OscConfig+0x270>)
 80027b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027b6:	091b      	lsrs	r3, r3, #4
 80027b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027bc:	4293      	cmp	r3, r2
 80027be:	d223      	bcs.n	8002808 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f000 fd55 	bl	8003274 <RCC_SetFlashLatencyFromMSIRange>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e383      	b.n	8002edc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027d4:	4b73      	ldr	r3, [pc, #460]	; (80029a4 <HAL_RCC_OscConfig+0x270>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a72      	ldr	r2, [pc, #456]	; (80029a4 <HAL_RCC_OscConfig+0x270>)
 80027da:	f043 0308 	orr.w	r3, r3, #8
 80027de:	6013      	str	r3, [r2, #0]
 80027e0:	4b70      	ldr	r3, [pc, #448]	; (80029a4 <HAL_RCC_OscConfig+0x270>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	496d      	ldr	r1, [pc, #436]	; (80029a4 <HAL_RCC_OscConfig+0x270>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027f2:	4b6c      	ldr	r3, [pc, #432]	; (80029a4 <HAL_RCC_OscConfig+0x270>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	021b      	lsls	r3, r3, #8
 8002800:	4968      	ldr	r1, [pc, #416]	; (80029a4 <HAL_RCC_OscConfig+0x270>)
 8002802:	4313      	orrs	r3, r2
 8002804:	604b      	str	r3, [r1, #4]
 8002806:	e025      	b.n	8002854 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002808:	4b66      	ldr	r3, [pc, #408]	; (80029a4 <HAL_RCC_OscConfig+0x270>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a65      	ldr	r2, [pc, #404]	; (80029a4 <HAL_RCC_OscConfig+0x270>)
 800280e:	f043 0308 	orr.w	r3, r3, #8
 8002812:	6013      	str	r3, [r2, #0]
 8002814:	4b63      	ldr	r3, [pc, #396]	; (80029a4 <HAL_RCC_OscConfig+0x270>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	4960      	ldr	r1, [pc, #384]	; (80029a4 <HAL_RCC_OscConfig+0x270>)
 8002822:	4313      	orrs	r3, r2
 8002824:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002826:	4b5f      	ldr	r3, [pc, #380]	; (80029a4 <HAL_RCC_OscConfig+0x270>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	021b      	lsls	r3, r3, #8
 8002834:	495b      	ldr	r1, [pc, #364]	; (80029a4 <HAL_RCC_OscConfig+0x270>)
 8002836:	4313      	orrs	r3, r2
 8002838:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d109      	bne.n	8002854 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	4618      	mov	r0, r3
 8002846:	f000 fd15 	bl	8003274 <RCC_SetFlashLatencyFromMSIRange>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e343      	b.n	8002edc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002854:	f000 fc4a 	bl	80030ec <HAL_RCC_GetSysClockFreq>
 8002858:	4602      	mov	r2, r0
 800285a:	4b52      	ldr	r3, [pc, #328]	; (80029a4 <HAL_RCC_OscConfig+0x270>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	091b      	lsrs	r3, r3, #4
 8002860:	f003 030f 	and.w	r3, r3, #15
 8002864:	4950      	ldr	r1, [pc, #320]	; (80029a8 <HAL_RCC_OscConfig+0x274>)
 8002866:	5ccb      	ldrb	r3, [r1, r3]
 8002868:	f003 031f 	and.w	r3, r3, #31
 800286c:	fa22 f303 	lsr.w	r3, r2, r3
 8002870:	4a4e      	ldr	r2, [pc, #312]	; (80029ac <HAL_RCC_OscConfig+0x278>)
 8002872:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002874:	4b4e      	ldr	r3, [pc, #312]	; (80029b0 <HAL_RCC_OscConfig+0x27c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f7fe f9bb 	bl	8000bf4 <HAL_InitTick>
 800287e:	4603      	mov	r3, r0
 8002880:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002882:	7bfb      	ldrb	r3, [r7, #15]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d052      	beq.n	800292e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002888:	7bfb      	ldrb	r3, [r7, #15]
 800288a:	e327      	b.n	8002edc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d032      	beq.n	80028fa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002894:	4b43      	ldr	r3, [pc, #268]	; (80029a4 <HAL_RCC_OscConfig+0x270>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a42      	ldr	r2, [pc, #264]	; (80029a4 <HAL_RCC_OscConfig+0x270>)
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028a0:	f7fe f9f8 	bl	8000c94 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028a8:	f7fe f9f4 	bl	8000c94 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e310      	b.n	8002edc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028ba:	4b3a      	ldr	r3, [pc, #232]	; (80029a4 <HAL_RCC_OscConfig+0x270>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0f0      	beq.n	80028a8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028c6:	4b37      	ldr	r3, [pc, #220]	; (80029a4 <HAL_RCC_OscConfig+0x270>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a36      	ldr	r2, [pc, #216]	; (80029a4 <HAL_RCC_OscConfig+0x270>)
 80028cc:	f043 0308 	orr.w	r3, r3, #8
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	4b34      	ldr	r3, [pc, #208]	; (80029a4 <HAL_RCC_OscConfig+0x270>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	4931      	ldr	r1, [pc, #196]	; (80029a4 <HAL_RCC_OscConfig+0x270>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028e4:	4b2f      	ldr	r3, [pc, #188]	; (80029a4 <HAL_RCC_OscConfig+0x270>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	021b      	lsls	r3, r3, #8
 80028f2:	492c      	ldr	r1, [pc, #176]	; (80029a4 <HAL_RCC_OscConfig+0x270>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	604b      	str	r3, [r1, #4]
 80028f8:	e01a      	b.n	8002930 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80028fa:	4b2a      	ldr	r3, [pc, #168]	; (80029a4 <HAL_RCC_OscConfig+0x270>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a29      	ldr	r2, [pc, #164]	; (80029a4 <HAL_RCC_OscConfig+0x270>)
 8002900:	f023 0301 	bic.w	r3, r3, #1
 8002904:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002906:	f7fe f9c5 	bl	8000c94 <HAL_GetTick>
 800290a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800290c:	e008      	b.n	8002920 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800290e:	f7fe f9c1 	bl	8000c94 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e2dd      	b.n	8002edc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002920:	4b20      	ldr	r3, [pc, #128]	; (80029a4 <HAL_RCC_OscConfig+0x270>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1f0      	bne.n	800290e <HAL_RCC_OscConfig+0x1da>
 800292c:	e000      	b.n	8002930 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800292e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b00      	cmp	r3, #0
 800293a:	d074      	beq.n	8002a26 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	2b08      	cmp	r3, #8
 8002940:	d005      	beq.n	800294e <HAL_RCC_OscConfig+0x21a>
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	2b0c      	cmp	r3, #12
 8002946:	d10e      	bne.n	8002966 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	2b03      	cmp	r3, #3
 800294c:	d10b      	bne.n	8002966 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800294e:	4b15      	ldr	r3, [pc, #84]	; (80029a4 <HAL_RCC_OscConfig+0x270>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d064      	beq.n	8002a24 <HAL_RCC_OscConfig+0x2f0>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d160      	bne.n	8002a24 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e2ba      	b.n	8002edc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800296e:	d106      	bne.n	800297e <HAL_RCC_OscConfig+0x24a>
 8002970:	4b0c      	ldr	r3, [pc, #48]	; (80029a4 <HAL_RCC_OscConfig+0x270>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a0b      	ldr	r2, [pc, #44]	; (80029a4 <HAL_RCC_OscConfig+0x270>)
 8002976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800297a:	6013      	str	r3, [r2, #0]
 800297c:	e026      	b.n	80029cc <HAL_RCC_OscConfig+0x298>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002986:	d115      	bne.n	80029b4 <HAL_RCC_OscConfig+0x280>
 8002988:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <HAL_RCC_OscConfig+0x270>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a05      	ldr	r2, [pc, #20]	; (80029a4 <HAL_RCC_OscConfig+0x270>)
 800298e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002992:	6013      	str	r3, [r2, #0]
 8002994:	4b03      	ldr	r3, [pc, #12]	; (80029a4 <HAL_RCC_OscConfig+0x270>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a02      	ldr	r2, [pc, #8]	; (80029a4 <HAL_RCC_OscConfig+0x270>)
 800299a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800299e:	6013      	str	r3, [r2, #0]
 80029a0:	e014      	b.n	80029cc <HAL_RCC_OscConfig+0x298>
 80029a2:	bf00      	nop
 80029a4:	40021000 	.word	0x40021000
 80029a8:	08004780 	.word	0x08004780
 80029ac:	20000000 	.word	0x20000000
 80029b0:	20000004 	.word	0x20000004
 80029b4:	4ba0      	ldr	r3, [pc, #640]	; (8002c38 <HAL_RCC_OscConfig+0x504>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a9f      	ldr	r2, [pc, #636]	; (8002c38 <HAL_RCC_OscConfig+0x504>)
 80029ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029be:	6013      	str	r3, [r2, #0]
 80029c0:	4b9d      	ldr	r3, [pc, #628]	; (8002c38 <HAL_RCC_OscConfig+0x504>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a9c      	ldr	r2, [pc, #624]	; (8002c38 <HAL_RCC_OscConfig+0x504>)
 80029c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d013      	beq.n	80029fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d4:	f7fe f95e 	bl	8000c94 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029dc:	f7fe f95a 	bl	8000c94 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b64      	cmp	r3, #100	; 0x64
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e276      	b.n	8002edc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029ee:	4b92      	ldr	r3, [pc, #584]	; (8002c38 <HAL_RCC_OscConfig+0x504>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0f0      	beq.n	80029dc <HAL_RCC_OscConfig+0x2a8>
 80029fa:	e014      	b.n	8002a26 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fc:	f7fe f94a 	bl	8000c94 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a04:	f7fe f946 	bl	8000c94 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b64      	cmp	r3, #100	; 0x64
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e262      	b.n	8002edc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a16:	4b88      	ldr	r3, [pc, #544]	; (8002c38 <HAL_RCC_OscConfig+0x504>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1f0      	bne.n	8002a04 <HAL_RCC_OscConfig+0x2d0>
 8002a22:	e000      	b.n	8002a26 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d060      	beq.n	8002af4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	2b04      	cmp	r3, #4
 8002a36:	d005      	beq.n	8002a44 <HAL_RCC_OscConfig+0x310>
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	2b0c      	cmp	r3, #12
 8002a3c:	d119      	bne.n	8002a72 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d116      	bne.n	8002a72 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a44:	4b7c      	ldr	r3, [pc, #496]	; (8002c38 <HAL_RCC_OscConfig+0x504>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d005      	beq.n	8002a5c <HAL_RCC_OscConfig+0x328>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e23f      	b.n	8002edc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a5c:	4b76      	ldr	r3, [pc, #472]	; (8002c38 <HAL_RCC_OscConfig+0x504>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	061b      	lsls	r3, r3, #24
 8002a6a:	4973      	ldr	r1, [pc, #460]	; (8002c38 <HAL_RCC_OscConfig+0x504>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a70:	e040      	b.n	8002af4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d023      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a7a:	4b6f      	ldr	r3, [pc, #444]	; (8002c38 <HAL_RCC_OscConfig+0x504>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a6e      	ldr	r2, [pc, #440]	; (8002c38 <HAL_RCC_OscConfig+0x504>)
 8002a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a86:	f7fe f905 	bl	8000c94 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a8e:	f7fe f901 	bl	8000c94 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e21d      	b.n	8002edc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aa0:	4b65      	ldr	r3, [pc, #404]	; (8002c38 <HAL_RCC_OscConfig+0x504>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0f0      	beq.n	8002a8e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aac:	4b62      	ldr	r3, [pc, #392]	; (8002c38 <HAL_RCC_OscConfig+0x504>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	061b      	lsls	r3, r3, #24
 8002aba:	495f      	ldr	r1, [pc, #380]	; (8002c38 <HAL_RCC_OscConfig+0x504>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	604b      	str	r3, [r1, #4]
 8002ac0:	e018      	b.n	8002af4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ac2:	4b5d      	ldr	r3, [pc, #372]	; (8002c38 <HAL_RCC_OscConfig+0x504>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a5c      	ldr	r2, [pc, #368]	; (8002c38 <HAL_RCC_OscConfig+0x504>)
 8002ac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002acc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ace:	f7fe f8e1 	bl	8000c94 <HAL_GetTick>
 8002ad2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ad4:	e008      	b.n	8002ae8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ad6:	f7fe f8dd 	bl	8000c94 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e1f9      	b.n	8002edc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ae8:	4b53      	ldr	r3, [pc, #332]	; (8002c38 <HAL_RCC_OscConfig+0x504>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1f0      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0308 	and.w	r3, r3, #8
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d03c      	beq.n	8002b7a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d01c      	beq.n	8002b42 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b08:	4b4b      	ldr	r3, [pc, #300]	; (8002c38 <HAL_RCC_OscConfig+0x504>)
 8002b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b0e:	4a4a      	ldr	r2, [pc, #296]	; (8002c38 <HAL_RCC_OscConfig+0x504>)
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b18:	f7fe f8bc 	bl	8000c94 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b20:	f7fe f8b8 	bl	8000c94 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e1d4      	b.n	8002edc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b32:	4b41      	ldr	r3, [pc, #260]	; (8002c38 <HAL_RCC_OscConfig+0x504>)
 8002b34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0ef      	beq.n	8002b20 <HAL_RCC_OscConfig+0x3ec>
 8002b40:	e01b      	b.n	8002b7a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b42:	4b3d      	ldr	r3, [pc, #244]	; (8002c38 <HAL_RCC_OscConfig+0x504>)
 8002b44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b48:	4a3b      	ldr	r2, [pc, #236]	; (8002c38 <HAL_RCC_OscConfig+0x504>)
 8002b4a:	f023 0301 	bic.w	r3, r3, #1
 8002b4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b52:	f7fe f89f 	bl	8000c94 <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b5a:	f7fe f89b 	bl	8000c94 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e1b7      	b.n	8002edc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b6c:	4b32      	ldr	r3, [pc, #200]	; (8002c38 <HAL_RCC_OscConfig+0x504>)
 8002b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1ef      	bne.n	8002b5a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0304 	and.w	r3, r3, #4
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 80a6 	beq.w	8002cd4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b8c:	4b2a      	ldr	r3, [pc, #168]	; (8002c38 <HAL_RCC_OscConfig+0x504>)
 8002b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10d      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b98:	4b27      	ldr	r3, [pc, #156]	; (8002c38 <HAL_RCC_OscConfig+0x504>)
 8002b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9c:	4a26      	ldr	r2, [pc, #152]	; (8002c38 <HAL_RCC_OscConfig+0x504>)
 8002b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ba4:	4b24      	ldr	r3, [pc, #144]	; (8002c38 <HAL_RCC_OscConfig+0x504>)
 8002ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bb4:	4b21      	ldr	r3, [pc, #132]	; (8002c3c <HAL_RCC_OscConfig+0x508>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d118      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bc0:	4b1e      	ldr	r3, [pc, #120]	; (8002c3c <HAL_RCC_OscConfig+0x508>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a1d      	ldr	r2, [pc, #116]	; (8002c3c <HAL_RCC_OscConfig+0x508>)
 8002bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bcc:	f7fe f862 	bl	8000c94 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bd4:	f7fe f85e 	bl	8000c94 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e17a      	b.n	8002edc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002be6:	4b15      	ldr	r3, [pc, #84]	; (8002c3c <HAL_RCC_OscConfig+0x508>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0f0      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d108      	bne.n	8002c0c <HAL_RCC_OscConfig+0x4d8>
 8002bfa:	4b0f      	ldr	r3, [pc, #60]	; (8002c38 <HAL_RCC_OscConfig+0x504>)
 8002bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c00:	4a0d      	ldr	r2, [pc, #52]	; (8002c38 <HAL_RCC_OscConfig+0x504>)
 8002c02:	f043 0301 	orr.w	r3, r3, #1
 8002c06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c0a:	e029      	b.n	8002c60 <HAL_RCC_OscConfig+0x52c>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	2b05      	cmp	r3, #5
 8002c12:	d115      	bne.n	8002c40 <HAL_RCC_OscConfig+0x50c>
 8002c14:	4b08      	ldr	r3, [pc, #32]	; (8002c38 <HAL_RCC_OscConfig+0x504>)
 8002c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c1a:	4a07      	ldr	r2, [pc, #28]	; (8002c38 <HAL_RCC_OscConfig+0x504>)
 8002c1c:	f043 0304 	orr.w	r3, r3, #4
 8002c20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c24:	4b04      	ldr	r3, [pc, #16]	; (8002c38 <HAL_RCC_OscConfig+0x504>)
 8002c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2a:	4a03      	ldr	r2, [pc, #12]	; (8002c38 <HAL_RCC_OscConfig+0x504>)
 8002c2c:	f043 0301 	orr.w	r3, r3, #1
 8002c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c34:	e014      	b.n	8002c60 <HAL_RCC_OscConfig+0x52c>
 8002c36:	bf00      	nop
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	40007000 	.word	0x40007000
 8002c40:	4b9c      	ldr	r3, [pc, #624]	; (8002eb4 <HAL_RCC_OscConfig+0x780>)
 8002c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c46:	4a9b      	ldr	r2, [pc, #620]	; (8002eb4 <HAL_RCC_OscConfig+0x780>)
 8002c48:	f023 0301 	bic.w	r3, r3, #1
 8002c4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c50:	4b98      	ldr	r3, [pc, #608]	; (8002eb4 <HAL_RCC_OscConfig+0x780>)
 8002c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c56:	4a97      	ldr	r2, [pc, #604]	; (8002eb4 <HAL_RCC_OscConfig+0x780>)
 8002c58:	f023 0304 	bic.w	r3, r3, #4
 8002c5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d016      	beq.n	8002c96 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c68:	f7fe f814 	bl	8000c94 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c6e:	e00a      	b.n	8002c86 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c70:	f7fe f810 	bl	8000c94 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e12a      	b.n	8002edc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c86:	4b8b      	ldr	r3, [pc, #556]	; (8002eb4 <HAL_RCC_OscConfig+0x780>)
 8002c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0ed      	beq.n	8002c70 <HAL_RCC_OscConfig+0x53c>
 8002c94:	e015      	b.n	8002cc2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c96:	f7fd fffd 	bl	8000c94 <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c9c:	e00a      	b.n	8002cb4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c9e:	f7fd fff9 	bl	8000c94 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e113      	b.n	8002edc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cb4:	4b7f      	ldr	r3, [pc, #508]	; (8002eb4 <HAL_RCC_OscConfig+0x780>)
 8002cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1ed      	bne.n	8002c9e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cc2:	7ffb      	ldrb	r3, [r7, #31]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d105      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cc8:	4b7a      	ldr	r3, [pc, #488]	; (8002eb4 <HAL_RCC_OscConfig+0x780>)
 8002cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ccc:	4a79      	ldr	r2, [pc, #484]	; (8002eb4 <HAL_RCC_OscConfig+0x780>)
 8002cce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cd2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 80fe 	beq.w	8002eda <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	f040 80d0 	bne.w	8002e88 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ce8:	4b72      	ldr	r3, [pc, #456]	; (8002eb4 <HAL_RCC_OscConfig+0x780>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f003 0203 	and.w	r2, r3, #3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d130      	bne.n	8002d5e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	3b01      	subs	r3, #1
 8002d08:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d127      	bne.n	8002d5e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d18:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d11f      	bne.n	8002d5e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d28:	2a07      	cmp	r2, #7
 8002d2a:	bf14      	ite	ne
 8002d2c:	2201      	movne	r2, #1
 8002d2e:	2200      	moveq	r2, #0
 8002d30:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d113      	bne.n	8002d5e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d40:	085b      	lsrs	r3, r3, #1
 8002d42:	3b01      	subs	r3, #1
 8002d44:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d109      	bne.n	8002d5e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	085b      	lsrs	r3, r3, #1
 8002d56:	3b01      	subs	r3, #1
 8002d58:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d06e      	beq.n	8002e3c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	2b0c      	cmp	r3, #12
 8002d62:	d069      	beq.n	8002e38 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d64:	4b53      	ldr	r3, [pc, #332]	; (8002eb4 <HAL_RCC_OscConfig+0x780>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d105      	bne.n	8002d7c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002d70:	4b50      	ldr	r3, [pc, #320]	; (8002eb4 <HAL_RCC_OscConfig+0x780>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e0ad      	b.n	8002edc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d80:	4b4c      	ldr	r3, [pc, #304]	; (8002eb4 <HAL_RCC_OscConfig+0x780>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a4b      	ldr	r2, [pc, #300]	; (8002eb4 <HAL_RCC_OscConfig+0x780>)
 8002d86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d8a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d8c:	f7fd ff82 	bl	8000c94 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d94:	f7fd ff7e 	bl	8000c94 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e09a      	b.n	8002edc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002da6:	4b43      	ldr	r3, [pc, #268]	; (8002eb4 <HAL_RCC_OscConfig+0x780>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1f0      	bne.n	8002d94 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002db2:	4b40      	ldr	r3, [pc, #256]	; (8002eb4 <HAL_RCC_OscConfig+0x780>)
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	4b40      	ldr	r3, [pc, #256]	; (8002eb8 <HAL_RCC_OscConfig+0x784>)
 8002db8:	4013      	ands	r3, r2
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002dc2:	3a01      	subs	r2, #1
 8002dc4:	0112      	lsls	r2, r2, #4
 8002dc6:	4311      	orrs	r1, r2
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002dcc:	0212      	lsls	r2, r2, #8
 8002dce:	4311      	orrs	r1, r2
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002dd4:	0852      	lsrs	r2, r2, #1
 8002dd6:	3a01      	subs	r2, #1
 8002dd8:	0552      	lsls	r2, r2, #21
 8002dda:	4311      	orrs	r1, r2
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002de0:	0852      	lsrs	r2, r2, #1
 8002de2:	3a01      	subs	r2, #1
 8002de4:	0652      	lsls	r2, r2, #25
 8002de6:	4311      	orrs	r1, r2
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002dec:	0912      	lsrs	r2, r2, #4
 8002dee:	0452      	lsls	r2, r2, #17
 8002df0:	430a      	orrs	r2, r1
 8002df2:	4930      	ldr	r1, [pc, #192]	; (8002eb4 <HAL_RCC_OscConfig+0x780>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002df8:	4b2e      	ldr	r3, [pc, #184]	; (8002eb4 <HAL_RCC_OscConfig+0x780>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a2d      	ldr	r2, [pc, #180]	; (8002eb4 <HAL_RCC_OscConfig+0x780>)
 8002dfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e02:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e04:	4b2b      	ldr	r3, [pc, #172]	; (8002eb4 <HAL_RCC_OscConfig+0x780>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	4a2a      	ldr	r2, [pc, #168]	; (8002eb4 <HAL_RCC_OscConfig+0x780>)
 8002e0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e0e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e10:	f7fd ff40 	bl	8000c94 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e18:	f7fd ff3c 	bl	8000c94 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e058      	b.n	8002edc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e2a:	4b22      	ldr	r3, [pc, #136]	; (8002eb4 <HAL_RCC_OscConfig+0x780>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0f0      	beq.n	8002e18 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e36:	e050      	b.n	8002eda <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e04f      	b.n	8002edc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e3c:	4b1d      	ldr	r3, [pc, #116]	; (8002eb4 <HAL_RCC_OscConfig+0x780>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d148      	bne.n	8002eda <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e48:	4b1a      	ldr	r3, [pc, #104]	; (8002eb4 <HAL_RCC_OscConfig+0x780>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a19      	ldr	r2, [pc, #100]	; (8002eb4 <HAL_RCC_OscConfig+0x780>)
 8002e4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e52:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e54:	4b17      	ldr	r3, [pc, #92]	; (8002eb4 <HAL_RCC_OscConfig+0x780>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	4a16      	ldr	r2, [pc, #88]	; (8002eb4 <HAL_RCC_OscConfig+0x780>)
 8002e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e5e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e60:	f7fd ff18 	bl	8000c94 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e68:	f7fd ff14 	bl	8000c94 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e030      	b.n	8002edc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e7a:	4b0e      	ldr	r3, [pc, #56]	; (8002eb4 <HAL_RCC_OscConfig+0x780>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0f0      	beq.n	8002e68 <HAL_RCC_OscConfig+0x734>
 8002e86:	e028      	b.n	8002eda <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	2b0c      	cmp	r3, #12
 8002e8c:	d023      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e8e:	4b09      	ldr	r3, [pc, #36]	; (8002eb4 <HAL_RCC_OscConfig+0x780>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a08      	ldr	r2, [pc, #32]	; (8002eb4 <HAL_RCC_OscConfig+0x780>)
 8002e94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9a:	f7fd fefb 	bl	8000c94 <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ea0:	e00c      	b.n	8002ebc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea2:	f7fd fef7 	bl	8000c94 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d905      	bls.n	8002ebc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e013      	b.n	8002edc <HAL_RCC_OscConfig+0x7a8>
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ebc:	4b09      	ldr	r3, [pc, #36]	; (8002ee4 <HAL_RCC_OscConfig+0x7b0>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1ec      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002ec8:	4b06      	ldr	r3, [pc, #24]	; (8002ee4 <HAL_RCC_OscConfig+0x7b0>)
 8002eca:	68da      	ldr	r2, [r3, #12]
 8002ecc:	4905      	ldr	r1, [pc, #20]	; (8002ee4 <HAL_RCC_OscConfig+0x7b0>)
 8002ece:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <HAL_RCC_OscConfig+0x7b4>)
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	60cb      	str	r3, [r1, #12]
 8002ed4:	e001      	b.n	8002eda <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e000      	b.n	8002edc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3720      	adds	r7, #32
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	feeefffc 	.word	0xfeeefffc

08002eec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e0e7      	b.n	80030d0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f00:	4b75      	ldr	r3, [pc, #468]	; (80030d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d910      	bls.n	8002f30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f0e:	4b72      	ldr	r3, [pc, #456]	; (80030d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f023 0207 	bic.w	r2, r3, #7
 8002f16:	4970      	ldr	r1, [pc, #448]	; (80030d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1e:	4b6e      	ldr	r3, [pc, #440]	; (80030d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d001      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e0cf      	b.n	80030d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d010      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	4b66      	ldr	r3, [pc, #408]	; (80030dc <HAL_RCC_ClockConfig+0x1f0>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d908      	bls.n	8002f5e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f4c:	4b63      	ldr	r3, [pc, #396]	; (80030dc <HAL_RCC_ClockConfig+0x1f0>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	4960      	ldr	r1, [pc, #384]	; (80030dc <HAL_RCC_ClockConfig+0x1f0>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d04c      	beq.n	8003004 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2b03      	cmp	r3, #3
 8002f70:	d107      	bne.n	8002f82 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f72:	4b5a      	ldr	r3, [pc, #360]	; (80030dc <HAL_RCC_ClockConfig+0x1f0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d121      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e0a6      	b.n	80030d0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d107      	bne.n	8002f9a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f8a:	4b54      	ldr	r3, [pc, #336]	; (80030dc <HAL_RCC_ClockConfig+0x1f0>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d115      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e09a      	b.n	80030d0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d107      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fa2:	4b4e      	ldr	r3, [pc, #312]	; (80030dc <HAL_RCC_ClockConfig+0x1f0>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d109      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e08e      	b.n	80030d0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fb2:	4b4a      	ldr	r3, [pc, #296]	; (80030dc <HAL_RCC_ClockConfig+0x1f0>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e086      	b.n	80030d0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fc2:	4b46      	ldr	r3, [pc, #280]	; (80030dc <HAL_RCC_ClockConfig+0x1f0>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f023 0203 	bic.w	r2, r3, #3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	4943      	ldr	r1, [pc, #268]	; (80030dc <HAL_RCC_ClockConfig+0x1f0>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fd4:	f7fd fe5e 	bl	8000c94 <HAL_GetTick>
 8002fd8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fda:	e00a      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fdc:	f7fd fe5a 	bl	8000c94 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e06e      	b.n	80030d0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ff2:	4b3a      	ldr	r3, [pc, #232]	; (80030dc <HAL_RCC_ClockConfig+0x1f0>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 020c 	and.w	r2, r3, #12
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	429a      	cmp	r2, r3
 8003002:	d1eb      	bne.n	8002fdc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d010      	beq.n	8003032 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	4b31      	ldr	r3, [pc, #196]	; (80030dc <HAL_RCC_ClockConfig+0x1f0>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800301c:	429a      	cmp	r2, r3
 800301e:	d208      	bcs.n	8003032 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003020:	4b2e      	ldr	r3, [pc, #184]	; (80030dc <HAL_RCC_ClockConfig+0x1f0>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	492b      	ldr	r1, [pc, #172]	; (80030dc <HAL_RCC_ClockConfig+0x1f0>)
 800302e:	4313      	orrs	r3, r2
 8003030:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003032:	4b29      	ldr	r3, [pc, #164]	; (80030d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	429a      	cmp	r2, r3
 800303e:	d210      	bcs.n	8003062 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003040:	4b25      	ldr	r3, [pc, #148]	; (80030d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f023 0207 	bic.w	r2, r3, #7
 8003048:	4923      	ldr	r1, [pc, #140]	; (80030d8 <HAL_RCC_ClockConfig+0x1ec>)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	4313      	orrs	r3, r2
 800304e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003050:	4b21      	ldr	r3, [pc, #132]	; (80030d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	429a      	cmp	r2, r3
 800305c:	d001      	beq.n	8003062 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e036      	b.n	80030d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0304 	and.w	r3, r3, #4
 800306a:	2b00      	cmp	r3, #0
 800306c:	d008      	beq.n	8003080 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800306e:	4b1b      	ldr	r3, [pc, #108]	; (80030dc <HAL_RCC_ClockConfig+0x1f0>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	4918      	ldr	r1, [pc, #96]	; (80030dc <HAL_RCC_ClockConfig+0x1f0>)
 800307c:	4313      	orrs	r3, r2
 800307e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0308 	and.w	r3, r3, #8
 8003088:	2b00      	cmp	r3, #0
 800308a:	d009      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800308c:	4b13      	ldr	r3, [pc, #76]	; (80030dc <HAL_RCC_ClockConfig+0x1f0>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	4910      	ldr	r1, [pc, #64]	; (80030dc <HAL_RCC_ClockConfig+0x1f0>)
 800309c:	4313      	orrs	r3, r2
 800309e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030a0:	f000 f824 	bl	80030ec <HAL_RCC_GetSysClockFreq>
 80030a4:	4602      	mov	r2, r0
 80030a6:	4b0d      	ldr	r3, [pc, #52]	; (80030dc <HAL_RCC_ClockConfig+0x1f0>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	091b      	lsrs	r3, r3, #4
 80030ac:	f003 030f 	and.w	r3, r3, #15
 80030b0:	490b      	ldr	r1, [pc, #44]	; (80030e0 <HAL_RCC_ClockConfig+0x1f4>)
 80030b2:	5ccb      	ldrb	r3, [r1, r3]
 80030b4:	f003 031f 	and.w	r3, r3, #31
 80030b8:	fa22 f303 	lsr.w	r3, r2, r3
 80030bc:	4a09      	ldr	r2, [pc, #36]	; (80030e4 <HAL_RCC_ClockConfig+0x1f8>)
 80030be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80030c0:	4b09      	ldr	r3, [pc, #36]	; (80030e8 <HAL_RCC_ClockConfig+0x1fc>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7fd fd95 	bl	8000bf4 <HAL_InitTick>
 80030ca:	4603      	mov	r3, r0
 80030cc:	72fb      	strb	r3, [r7, #11]

  return status;
 80030ce:	7afb      	ldrb	r3, [r7, #11]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40022000 	.word	0x40022000
 80030dc:	40021000 	.word	0x40021000
 80030e0:	08004780 	.word	0x08004780
 80030e4:	20000000 	.word	0x20000000
 80030e8:	20000004 	.word	0x20000004

080030ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b089      	sub	sp, #36	; 0x24
 80030f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	61fb      	str	r3, [r7, #28]
 80030f6:	2300      	movs	r3, #0
 80030f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030fa:	4b3e      	ldr	r3, [pc, #248]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 030c 	and.w	r3, r3, #12
 8003102:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003104:	4b3b      	ldr	r3, [pc, #236]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f003 0303 	and.w	r3, r3, #3
 800310c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d005      	beq.n	8003120 <HAL_RCC_GetSysClockFreq+0x34>
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	2b0c      	cmp	r3, #12
 8003118:	d121      	bne.n	800315e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d11e      	bne.n	800315e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003120:	4b34      	ldr	r3, [pc, #208]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0308 	and.w	r3, r3, #8
 8003128:	2b00      	cmp	r3, #0
 800312a:	d107      	bne.n	800313c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800312c:	4b31      	ldr	r3, [pc, #196]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800312e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003132:	0a1b      	lsrs	r3, r3, #8
 8003134:	f003 030f 	and.w	r3, r3, #15
 8003138:	61fb      	str	r3, [r7, #28]
 800313a:	e005      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800313c:	4b2d      	ldr	r3, [pc, #180]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	091b      	lsrs	r3, r3, #4
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003148:	4a2b      	ldr	r2, [pc, #172]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003150:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10d      	bne.n	8003174 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800315c:	e00a      	b.n	8003174 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	2b04      	cmp	r3, #4
 8003162:	d102      	bne.n	800316a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003164:	4b25      	ldr	r3, [pc, #148]	; (80031fc <HAL_RCC_GetSysClockFreq+0x110>)
 8003166:	61bb      	str	r3, [r7, #24]
 8003168:	e004      	b.n	8003174 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	2b08      	cmp	r3, #8
 800316e:	d101      	bne.n	8003174 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003170:	4b23      	ldr	r3, [pc, #140]	; (8003200 <HAL_RCC_GetSysClockFreq+0x114>)
 8003172:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	2b0c      	cmp	r3, #12
 8003178:	d134      	bne.n	80031e4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800317a:	4b1e      	ldr	r3, [pc, #120]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	2b02      	cmp	r3, #2
 8003188:	d003      	beq.n	8003192 <HAL_RCC_GetSysClockFreq+0xa6>
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	2b03      	cmp	r3, #3
 800318e:	d003      	beq.n	8003198 <HAL_RCC_GetSysClockFreq+0xac>
 8003190:	e005      	b.n	800319e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003192:	4b1a      	ldr	r3, [pc, #104]	; (80031fc <HAL_RCC_GetSysClockFreq+0x110>)
 8003194:	617b      	str	r3, [r7, #20]
      break;
 8003196:	e005      	b.n	80031a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003198:	4b19      	ldr	r3, [pc, #100]	; (8003200 <HAL_RCC_GetSysClockFreq+0x114>)
 800319a:	617b      	str	r3, [r7, #20]
      break;
 800319c:	e002      	b.n	80031a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	617b      	str	r3, [r7, #20]
      break;
 80031a2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031a4:	4b13      	ldr	r3, [pc, #76]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	091b      	lsrs	r3, r3, #4
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	3301      	adds	r3, #1
 80031b0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80031b2:	4b10      	ldr	r3, [pc, #64]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	0a1b      	lsrs	r3, r3, #8
 80031b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	fb03 f202 	mul.w	r2, r3, r2
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031ca:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	0e5b      	lsrs	r3, r3, #25
 80031d0:	f003 0303 	and.w	r3, r3, #3
 80031d4:	3301      	adds	r3, #1
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80031e4:	69bb      	ldr	r3, [r7, #24]
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3724      	adds	r7, #36	; 0x24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	40021000 	.word	0x40021000
 80031f8:	08004798 	.word	0x08004798
 80031fc:	00f42400 	.word	0x00f42400
 8003200:	007a1200 	.word	0x007a1200

08003204 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003208:	4b03      	ldr	r3, [pc, #12]	; (8003218 <HAL_RCC_GetHCLKFreq+0x14>)
 800320a:	681b      	ldr	r3, [r3, #0]
}
 800320c:	4618      	mov	r0, r3
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	20000000 	.word	0x20000000

0800321c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003220:	f7ff fff0 	bl	8003204 <HAL_RCC_GetHCLKFreq>
 8003224:	4602      	mov	r2, r0
 8003226:	4b06      	ldr	r3, [pc, #24]	; (8003240 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	0a1b      	lsrs	r3, r3, #8
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	4904      	ldr	r1, [pc, #16]	; (8003244 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003232:	5ccb      	ldrb	r3, [r1, r3]
 8003234:	f003 031f 	and.w	r3, r3, #31
 8003238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800323c:	4618      	mov	r0, r3
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40021000 	.word	0x40021000
 8003244:	08004790 	.word	0x08004790

08003248 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800324c:	f7ff ffda 	bl	8003204 <HAL_RCC_GetHCLKFreq>
 8003250:	4602      	mov	r2, r0
 8003252:	4b06      	ldr	r3, [pc, #24]	; (800326c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	0adb      	lsrs	r3, r3, #11
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	4904      	ldr	r1, [pc, #16]	; (8003270 <HAL_RCC_GetPCLK2Freq+0x28>)
 800325e:	5ccb      	ldrb	r3, [r1, r3]
 8003260:	f003 031f 	and.w	r3, r3, #31
 8003264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003268:	4618      	mov	r0, r3
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40021000 	.word	0x40021000
 8003270:	08004790 	.word	0x08004790

08003274 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800327c:	2300      	movs	r3, #0
 800327e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003280:	4b2a      	ldr	r3, [pc, #168]	; (800332c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800328c:	f7ff f9ee 	bl	800266c <HAL_PWREx_GetVoltageRange>
 8003290:	6178      	str	r0, [r7, #20]
 8003292:	e014      	b.n	80032be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003294:	4b25      	ldr	r3, [pc, #148]	; (800332c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003298:	4a24      	ldr	r2, [pc, #144]	; (800332c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800329a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800329e:	6593      	str	r3, [r2, #88]	; 0x58
 80032a0:	4b22      	ldr	r3, [pc, #136]	; (800332c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a8:	60fb      	str	r3, [r7, #12]
 80032aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80032ac:	f7ff f9de 	bl	800266c <HAL_PWREx_GetVoltageRange>
 80032b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80032b2:	4b1e      	ldr	r3, [pc, #120]	; (800332c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b6:	4a1d      	ldr	r2, [pc, #116]	; (800332c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032bc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032c4:	d10b      	bne.n	80032de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b80      	cmp	r3, #128	; 0x80
 80032ca:	d919      	bls.n	8003300 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2ba0      	cmp	r3, #160	; 0xa0
 80032d0:	d902      	bls.n	80032d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032d2:	2302      	movs	r3, #2
 80032d4:	613b      	str	r3, [r7, #16]
 80032d6:	e013      	b.n	8003300 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032d8:	2301      	movs	r3, #1
 80032da:	613b      	str	r3, [r7, #16]
 80032dc:	e010      	b.n	8003300 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b80      	cmp	r3, #128	; 0x80
 80032e2:	d902      	bls.n	80032ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80032e4:	2303      	movs	r3, #3
 80032e6:	613b      	str	r3, [r7, #16]
 80032e8:	e00a      	b.n	8003300 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2b80      	cmp	r3, #128	; 0x80
 80032ee:	d102      	bne.n	80032f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032f0:	2302      	movs	r3, #2
 80032f2:	613b      	str	r3, [r7, #16]
 80032f4:	e004      	b.n	8003300 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b70      	cmp	r3, #112	; 0x70
 80032fa:	d101      	bne.n	8003300 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032fc:	2301      	movs	r3, #1
 80032fe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003300:	4b0b      	ldr	r3, [pc, #44]	; (8003330 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f023 0207 	bic.w	r2, r3, #7
 8003308:	4909      	ldr	r1, [pc, #36]	; (8003330 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	4313      	orrs	r3, r2
 800330e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003310:	4b07      	ldr	r3, [pc, #28]	; (8003330 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0307 	and.w	r3, r3, #7
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	429a      	cmp	r2, r3
 800331c:	d001      	beq.n	8003322 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e000      	b.n	8003324 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3718      	adds	r7, #24
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40021000 	.word	0x40021000
 8003330:	40022000 	.word	0x40022000

08003334 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800333c:	2300      	movs	r3, #0
 800333e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003340:	2300      	movs	r3, #0
 8003342:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800334c:	2b00      	cmp	r3, #0
 800334e:	d041      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003354:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003358:	d02a      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800335a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800335e:	d824      	bhi.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003360:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003364:	d008      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003366:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800336a:	d81e      	bhi.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00a      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003370:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003374:	d010      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003376:	e018      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003378:	4b86      	ldr	r3, [pc, #536]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	4a85      	ldr	r2, [pc, #532]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800337e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003382:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003384:	e015      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	3304      	adds	r3, #4
 800338a:	2100      	movs	r1, #0
 800338c:	4618      	mov	r0, r3
 800338e:	f000 fabb 	bl	8003908 <RCCEx_PLLSAI1_Config>
 8003392:	4603      	mov	r3, r0
 8003394:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003396:	e00c      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3320      	adds	r3, #32
 800339c:	2100      	movs	r1, #0
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 fba6 	bl	8003af0 <RCCEx_PLLSAI2_Config>
 80033a4:	4603      	mov	r3, r0
 80033a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033a8:	e003      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	74fb      	strb	r3, [r7, #19]
      break;
 80033ae:	e000      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80033b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033b2:	7cfb      	ldrb	r3, [r7, #19]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10b      	bne.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033b8:	4b76      	ldr	r3, [pc, #472]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033c6:	4973      	ldr	r1, [pc, #460]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80033ce:	e001      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d0:	7cfb      	ldrb	r3, [r7, #19]
 80033d2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d041      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033e8:	d02a      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80033ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033ee:	d824      	bhi.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80033f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033f4:	d008      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80033f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033fa:	d81e      	bhi.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00a      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003400:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003404:	d010      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003406:	e018      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003408:	4b62      	ldr	r3, [pc, #392]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	4a61      	ldr	r2, [pc, #388]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800340e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003412:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003414:	e015      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	3304      	adds	r3, #4
 800341a:	2100      	movs	r1, #0
 800341c:	4618      	mov	r0, r3
 800341e:	f000 fa73 	bl	8003908 <RCCEx_PLLSAI1_Config>
 8003422:	4603      	mov	r3, r0
 8003424:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003426:	e00c      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	3320      	adds	r3, #32
 800342c:	2100      	movs	r1, #0
 800342e:	4618      	mov	r0, r3
 8003430:	f000 fb5e 	bl	8003af0 <RCCEx_PLLSAI2_Config>
 8003434:	4603      	mov	r3, r0
 8003436:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003438:	e003      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	74fb      	strb	r3, [r7, #19]
      break;
 800343e:	e000      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003440:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003442:	7cfb      	ldrb	r3, [r7, #19]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10b      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003448:	4b52      	ldr	r3, [pc, #328]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800344a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003456:	494f      	ldr	r1, [pc, #316]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003458:	4313      	orrs	r3, r2
 800345a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800345e:	e001      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003460:	7cfb      	ldrb	r3, [r7, #19]
 8003462:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 80a0 	beq.w	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003472:	2300      	movs	r3, #0
 8003474:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003476:	4b47      	ldr	r3, [pc, #284]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003482:	2301      	movs	r3, #1
 8003484:	e000      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003486:	2300      	movs	r3, #0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00d      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800348c:	4b41      	ldr	r3, [pc, #260]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800348e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003490:	4a40      	ldr	r2, [pc, #256]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003496:	6593      	str	r3, [r2, #88]	; 0x58
 8003498:	4b3e      	ldr	r3, [pc, #248]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800349a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800349c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a0:	60bb      	str	r3, [r7, #8]
 80034a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034a4:	2301      	movs	r3, #1
 80034a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034a8:	4b3b      	ldr	r3, [pc, #236]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a3a      	ldr	r2, [pc, #232]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034b4:	f7fd fbee 	bl	8000c94 <HAL_GetTick>
 80034b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034ba:	e009      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034bc:	f7fd fbea 	bl	8000c94 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d902      	bls.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	74fb      	strb	r3, [r7, #19]
        break;
 80034ce:	e005      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034d0:	4b31      	ldr	r3, [pc, #196]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0ef      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80034dc:	7cfb      	ldrb	r3, [r7, #19]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d15c      	bne.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034e2:	4b2c      	ldr	r3, [pc, #176]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d01f      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d019      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003500:	4b24      	ldr	r3, [pc, #144]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003506:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800350a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800350c:	4b21      	ldr	r3, [pc, #132]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800350e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003512:	4a20      	ldr	r2, [pc, #128]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800351c:	4b1d      	ldr	r3, [pc, #116]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800351e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003522:	4a1c      	ldr	r2, [pc, #112]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003528:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800352c:	4a19      	ldr	r2, [pc, #100]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d016      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353e:	f7fd fba9 	bl	8000c94 <HAL_GetTick>
 8003542:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003544:	e00b      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003546:	f7fd fba5 	bl	8000c94 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	f241 3288 	movw	r2, #5000	; 0x1388
 8003554:	4293      	cmp	r3, r2
 8003556:	d902      	bls.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	74fb      	strb	r3, [r7, #19]
            break;
 800355c:	e006      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800355e:	4b0d      	ldr	r3, [pc, #52]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0ec      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800356c:	7cfb      	ldrb	r3, [r7, #19]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10c      	bne.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003572:	4b08      	ldr	r3, [pc, #32]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003578:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003582:	4904      	ldr	r1, [pc, #16]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003584:	4313      	orrs	r3, r2
 8003586:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800358a:	e009      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800358c:	7cfb      	ldrb	r3, [r7, #19]
 800358e:	74bb      	strb	r3, [r7, #18]
 8003590:	e006      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003592:	bf00      	nop
 8003594:	40021000 	.word	0x40021000
 8003598:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800359c:	7cfb      	ldrb	r3, [r7, #19]
 800359e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035a0:	7c7b      	ldrb	r3, [r7, #17]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d105      	bne.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035a6:	4b9e      	ldr	r3, [pc, #632]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035aa:	4a9d      	ldr	r2, [pc, #628]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00a      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035be:	4b98      	ldr	r3, [pc, #608]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c4:	f023 0203 	bic.w	r2, r3, #3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035cc:	4994      	ldr	r1, [pc, #592]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00a      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035e0:	4b8f      	ldr	r3, [pc, #572]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e6:	f023 020c 	bic.w	r2, r3, #12
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ee:	498c      	ldr	r1, [pc, #560]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0304 	and.w	r3, r3, #4
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00a      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003602:	4b87      	ldr	r3, [pc, #540]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003608:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003610:	4983      	ldr	r1, [pc, #524]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003612:	4313      	orrs	r3, r2
 8003614:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0308 	and.w	r3, r3, #8
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00a      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003624:	4b7e      	ldr	r3, [pc, #504]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003632:	497b      	ldr	r1, [pc, #492]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003634:	4313      	orrs	r3, r2
 8003636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0310 	and.w	r3, r3, #16
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003646:	4b76      	ldr	r3, [pc, #472]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003654:	4972      	ldr	r1, [pc, #456]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003656:	4313      	orrs	r3, r2
 8003658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0320 	and.w	r3, r3, #32
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00a      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003668:	4b6d      	ldr	r3, [pc, #436]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800366a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800366e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003676:	496a      	ldr	r1, [pc, #424]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003678:	4313      	orrs	r3, r2
 800367a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00a      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800368a:	4b65      	ldr	r3, [pc, #404]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800368c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003690:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003698:	4961      	ldr	r1, [pc, #388]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800369a:	4313      	orrs	r3, r2
 800369c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00a      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036ac:	4b5c      	ldr	r3, [pc, #368]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ba:	4959      	ldr	r1, [pc, #356]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00a      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036ce:	4b54      	ldr	r3, [pc, #336]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036dc:	4950      	ldr	r1, [pc, #320]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00a      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036f0:	4b4b      	ldr	r3, [pc, #300]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fe:	4948      	ldr	r1, [pc, #288]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003700:	4313      	orrs	r3, r2
 8003702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00a      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003712:	4b43      	ldr	r3, [pc, #268]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003718:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003720:	493f      	ldr	r1, [pc, #252]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003722:	4313      	orrs	r3, r2
 8003724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d028      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003734:	4b3a      	ldr	r3, [pc, #232]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003742:	4937      	ldr	r1, [pc, #220]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003744:	4313      	orrs	r3, r2
 8003746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800374e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003752:	d106      	bne.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003754:	4b32      	ldr	r3, [pc, #200]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	4a31      	ldr	r2, [pc, #196]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800375a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800375e:	60d3      	str	r3, [r2, #12]
 8003760:	e011      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003766:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800376a:	d10c      	bne.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3304      	adds	r3, #4
 8003770:	2101      	movs	r1, #1
 8003772:	4618      	mov	r0, r3
 8003774:	f000 f8c8 	bl	8003908 <RCCEx_PLLSAI1_Config>
 8003778:	4603      	mov	r3, r0
 800377a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800377c:	7cfb      	ldrb	r3, [r7, #19]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003782:	7cfb      	ldrb	r3, [r7, #19]
 8003784:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d028      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003792:	4b23      	ldr	r3, [pc, #140]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003798:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a0:	491f      	ldr	r1, [pc, #124]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037b0:	d106      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037b2:	4b1b      	ldr	r3, [pc, #108]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	4a1a      	ldr	r2, [pc, #104]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037bc:	60d3      	str	r3, [r2, #12]
 80037be:	e011      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037c8:	d10c      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	3304      	adds	r3, #4
 80037ce:	2101      	movs	r1, #1
 80037d0:	4618      	mov	r0, r3
 80037d2:	f000 f899 	bl	8003908 <RCCEx_PLLSAI1_Config>
 80037d6:	4603      	mov	r3, r0
 80037d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037da:	7cfb      	ldrb	r3, [r7, #19]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80037e0:	7cfb      	ldrb	r3, [r7, #19]
 80037e2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d02b      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037f0:	4b0b      	ldr	r3, [pc, #44]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037fe:	4908      	ldr	r1, [pc, #32]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003800:	4313      	orrs	r3, r2
 8003802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800380a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800380e:	d109      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003810:	4b03      	ldr	r3, [pc, #12]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	4a02      	ldr	r2, [pc, #8]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003816:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800381a:	60d3      	str	r3, [r2, #12]
 800381c:	e014      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800381e:	bf00      	nop
 8003820:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003828:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800382c:	d10c      	bne.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	3304      	adds	r3, #4
 8003832:	2101      	movs	r1, #1
 8003834:	4618      	mov	r0, r3
 8003836:	f000 f867 	bl	8003908 <RCCEx_PLLSAI1_Config>
 800383a:	4603      	mov	r3, r0
 800383c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800383e:	7cfb      	ldrb	r3, [r7, #19]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003844:	7cfb      	ldrb	r3, [r7, #19]
 8003846:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d02f      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003854:	4b2b      	ldr	r3, [pc, #172]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800385a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003862:	4928      	ldr	r1, [pc, #160]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003864:	4313      	orrs	r3, r2
 8003866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800386e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003872:	d10d      	bne.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3304      	adds	r3, #4
 8003878:	2102      	movs	r1, #2
 800387a:	4618      	mov	r0, r3
 800387c:	f000 f844 	bl	8003908 <RCCEx_PLLSAI1_Config>
 8003880:	4603      	mov	r3, r0
 8003882:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003884:	7cfb      	ldrb	r3, [r7, #19]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d014      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800388a:	7cfb      	ldrb	r3, [r7, #19]
 800388c:	74bb      	strb	r3, [r7, #18]
 800388e:	e011      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003894:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003898:	d10c      	bne.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	3320      	adds	r3, #32
 800389e:	2102      	movs	r1, #2
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 f925 	bl	8003af0 <RCCEx_PLLSAI2_Config>
 80038a6:	4603      	mov	r3, r0
 80038a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038aa:	7cfb      	ldrb	r3, [r7, #19]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80038b0:	7cfb      	ldrb	r3, [r7, #19]
 80038b2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00a      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038c0:	4b10      	ldr	r3, [pc, #64]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038ce:	490d      	ldr	r1, [pc, #52]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00b      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038e2:	4b08      	ldr	r3, [pc, #32]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038f2:	4904      	ldr	r1, [pc, #16]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80038fa:	7cbb      	ldrb	r3, [r7, #18]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3718      	adds	r7, #24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	40021000 	.word	0x40021000

08003908 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003912:	2300      	movs	r3, #0
 8003914:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003916:	4b75      	ldr	r3, [pc, #468]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	f003 0303 	and.w	r3, r3, #3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d018      	beq.n	8003954 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003922:	4b72      	ldr	r3, [pc, #456]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f003 0203 	and.w	r2, r3, #3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	429a      	cmp	r2, r3
 8003930:	d10d      	bne.n	800394e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
       ||
 8003936:	2b00      	cmp	r3, #0
 8003938:	d009      	beq.n	800394e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800393a:	4b6c      	ldr	r3, [pc, #432]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	091b      	lsrs	r3, r3, #4
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	1c5a      	adds	r2, r3, #1
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
       ||
 800394a:	429a      	cmp	r2, r3
 800394c:	d047      	beq.n	80039de <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	73fb      	strb	r3, [r7, #15]
 8003952:	e044      	b.n	80039de <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b03      	cmp	r3, #3
 800395a:	d018      	beq.n	800398e <RCCEx_PLLSAI1_Config+0x86>
 800395c:	2b03      	cmp	r3, #3
 800395e:	d825      	bhi.n	80039ac <RCCEx_PLLSAI1_Config+0xa4>
 8003960:	2b01      	cmp	r3, #1
 8003962:	d002      	beq.n	800396a <RCCEx_PLLSAI1_Config+0x62>
 8003964:	2b02      	cmp	r3, #2
 8003966:	d009      	beq.n	800397c <RCCEx_PLLSAI1_Config+0x74>
 8003968:	e020      	b.n	80039ac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800396a:	4b60      	ldr	r3, [pc, #384]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d11d      	bne.n	80039b2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800397a:	e01a      	b.n	80039b2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800397c:	4b5b      	ldr	r3, [pc, #364]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003984:	2b00      	cmp	r3, #0
 8003986:	d116      	bne.n	80039b6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800398c:	e013      	b.n	80039b6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800398e:	4b57      	ldr	r3, [pc, #348]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10f      	bne.n	80039ba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800399a:	4b54      	ldr	r3, [pc, #336]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d109      	bne.n	80039ba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039aa:	e006      	b.n	80039ba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	73fb      	strb	r3, [r7, #15]
      break;
 80039b0:	e004      	b.n	80039bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039b2:	bf00      	nop
 80039b4:	e002      	b.n	80039bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039b6:	bf00      	nop
 80039b8:	e000      	b.n	80039bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80039bc:	7bfb      	ldrb	r3, [r7, #15]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10d      	bne.n	80039de <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039c2:	4b4a      	ldr	r3, [pc, #296]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6819      	ldr	r1, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	3b01      	subs	r3, #1
 80039d4:	011b      	lsls	r3, r3, #4
 80039d6:	430b      	orrs	r3, r1
 80039d8:	4944      	ldr	r1, [pc, #272]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80039de:	7bfb      	ldrb	r3, [r7, #15]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d17d      	bne.n	8003ae0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80039e4:	4b41      	ldr	r3, [pc, #260]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a40      	ldr	r2, [pc, #256]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039f0:	f7fd f950 	bl	8000c94 <HAL_GetTick>
 80039f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039f6:	e009      	b.n	8003a0c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039f8:	f7fd f94c 	bl	8000c94 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d902      	bls.n	8003a0c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	73fb      	strb	r3, [r7, #15]
        break;
 8003a0a:	e005      	b.n	8003a18 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a0c:	4b37      	ldr	r3, [pc, #220]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1ef      	bne.n	80039f8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d160      	bne.n	8003ae0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d111      	bne.n	8003a48 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a24:	4b31      	ldr	r3, [pc, #196]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003a2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	6892      	ldr	r2, [r2, #8]
 8003a34:	0211      	lsls	r1, r2, #8
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	68d2      	ldr	r2, [r2, #12]
 8003a3a:	0912      	lsrs	r2, r2, #4
 8003a3c:	0452      	lsls	r2, r2, #17
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	492a      	ldr	r1, [pc, #168]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	610b      	str	r3, [r1, #16]
 8003a46:	e027      	b.n	8003a98 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d112      	bne.n	8003a74 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a4e:	4b27      	ldr	r3, [pc, #156]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003a56:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6892      	ldr	r2, [r2, #8]
 8003a5e:	0211      	lsls	r1, r2, #8
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6912      	ldr	r2, [r2, #16]
 8003a64:	0852      	lsrs	r2, r2, #1
 8003a66:	3a01      	subs	r2, #1
 8003a68:	0552      	lsls	r2, r2, #21
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	491f      	ldr	r1, [pc, #124]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	610b      	str	r3, [r1, #16]
 8003a72:	e011      	b.n	8003a98 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a74:	4b1d      	ldr	r3, [pc, #116]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6892      	ldr	r2, [r2, #8]
 8003a84:	0211      	lsls	r1, r2, #8
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	6952      	ldr	r2, [r2, #20]
 8003a8a:	0852      	lsrs	r2, r2, #1
 8003a8c:	3a01      	subs	r2, #1
 8003a8e:	0652      	lsls	r2, r2, #25
 8003a90:	430a      	orrs	r2, r1
 8003a92:	4916      	ldr	r1, [pc, #88]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a98:	4b14      	ldr	r3, [pc, #80]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a13      	ldr	r2, [pc, #76]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003aa2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa4:	f7fd f8f6 	bl	8000c94 <HAL_GetTick>
 8003aa8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003aaa:	e009      	b.n	8003ac0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003aac:	f7fd f8f2 	bl	8000c94 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d902      	bls.n	8003ac0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	73fb      	strb	r3, [r7, #15]
          break;
 8003abe:	e005      	b.n	8003acc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ac0:	4b0a      	ldr	r3, [pc, #40]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0ef      	beq.n	8003aac <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d106      	bne.n	8003ae0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003ad2:	4b06      	ldr	r3, [pc, #24]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ad4:	691a      	ldr	r2, [r3, #16]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	4904      	ldr	r1, [pc, #16]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	40021000 	.word	0x40021000

08003af0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003afe:	4b6a      	ldr	r3, [pc, #424]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	f003 0303 	and.w	r3, r3, #3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d018      	beq.n	8003b3c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003b0a:	4b67      	ldr	r3, [pc, #412]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f003 0203 	and.w	r2, r3, #3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d10d      	bne.n	8003b36 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
       ||
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d009      	beq.n	8003b36 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003b22:	4b61      	ldr	r3, [pc, #388]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	091b      	lsrs	r3, r3, #4
 8003b28:	f003 0307 	and.w	r3, r3, #7
 8003b2c:	1c5a      	adds	r2, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
       ||
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d047      	beq.n	8003bc6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	73fb      	strb	r3, [r7, #15]
 8003b3a:	e044      	b.n	8003bc6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2b03      	cmp	r3, #3
 8003b42:	d018      	beq.n	8003b76 <RCCEx_PLLSAI2_Config+0x86>
 8003b44:	2b03      	cmp	r3, #3
 8003b46:	d825      	bhi.n	8003b94 <RCCEx_PLLSAI2_Config+0xa4>
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d002      	beq.n	8003b52 <RCCEx_PLLSAI2_Config+0x62>
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d009      	beq.n	8003b64 <RCCEx_PLLSAI2_Config+0x74>
 8003b50:	e020      	b.n	8003b94 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b52:	4b55      	ldr	r3, [pc, #340]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d11d      	bne.n	8003b9a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b62:	e01a      	b.n	8003b9a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b64:	4b50      	ldr	r3, [pc, #320]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d116      	bne.n	8003b9e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b74:	e013      	b.n	8003b9e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b76:	4b4c      	ldr	r3, [pc, #304]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10f      	bne.n	8003ba2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b82:	4b49      	ldr	r3, [pc, #292]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d109      	bne.n	8003ba2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b92:	e006      	b.n	8003ba2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	73fb      	strb	r3, [r7, #15]
      break;
 8003b98:	e004      	b.n	8003ba4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b9a:	bf00      	nop
 8003b9c:	e002      	b.n	8003ba4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b9e:	bf00      	nop
 8003ba0:	e000      	b.n	8003ba4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ba2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ba4:	7bfb      	ldrb	r3, [r7, #15]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10d      	bne.n	8003bc6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003baa:	4b3f      	ldr	r3, [pc, #252]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6819      	ldr	r1, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	011b      	lsls	r3, r3, #4
 8003bbe:	430b      	orrs	r3, r1
 8003bc0:	4939      	ldr	r1, [pc, #228]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003bc6:	7bfb      	ldrb	r3, [r7, #15]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d167      	bne.n	8003c9c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003bcc:	4b36      	ldr	r3, [pc, #216]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a35      	ldr	r2, [pc, #212]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bd8:	f7fd f85c 	bl	8000c94 <HAL_GetTick>
 8003bdc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003bde:	e009      	b.n	8003bf4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003be0:	f7fd f858 	bl	8000c94 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d902      	bls.n	8003bf4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	73fb      	strb	r3, [r7, #15]
        break;
 8003bf2:	e005      	b.n	8003c00 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003bf4:	4b2c      	ldr	r3, [pc, #176]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1ef      	bne.n	8003be0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c00:	7bfb      	ldrb	r3, [r7, #15]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d14a      	bne.n	8003c9c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d111      	bne.n	8003c30 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c0c:	4b26      	ldr	r3, [pc, #152]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003c14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	6892      	ldr	r2, [r2, #8]
 8003c1c:	0211      	lsls	r1, r2, #8
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	68d2      	ldr	r2, [r2, #12]
 8003c22:	0912      	lsrs	r2, r2, #4
 8003c24:	0452      	lsls	r2, r2, #17
 8003c26:	430a      	orrs	r2, r1
 8003c28:	491f      	ldr	r1, [pc, #124]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	614b      	str	r3, [r1, #20]
 8003c2e:	e011      	b.n	8003c54 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c30:	4b1d      	ldr	r3, [pc, #116]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c38:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6892      	ldr	r2, [r2, #8]
 8003c40:	0211      	lsls	r1, r2, #8
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6912      	ldr	r2, [r2, #16]
 8003c46:	0852      	lsrs	r2, r2, #1
 8003c48:	3a01      	subs	r2, #1
 8003c4a:	0652      	lsls	r2, r2, #25
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	4916      	ldr	r1, [pc, #88]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003c54:	4b14      	ldr	r3, [pc, #80]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a13      	ldr	r2, [pc, #76]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c5e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c60:	f7fd f818 	bl	8000c94 <HAL_GetTick>
 8003c64:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c66:	e009      	b.n	8003c7c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c68:	f7fd f814 	bl	8000c94 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d902      	bls.n	8003c7c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	73fb      	strb	r3, [r7, #15]
          break;
 8003c7a:	e005      	b.n	8003c88 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d0ef      	beq.n	8003c68 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003c88:	7bfb      	ldrb	r3, [r7, #15]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d106      	bne.n	8003c9c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003c8e:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c90:	695a      	ldr	r2, [r3, #20]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	4904      	ldr	r1, [pc, #16]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	40021000 	.word	0x40021000

08003cac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e040      	b.n	8003d40 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d106      	bne.n	8003cd4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7fc fe76 	bl	80009c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2224      	movs	r2, #36	; 0x24
 8003cd8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 0201 	bic.w	r2, r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f82c 	bl	8003d48 <UART_SetConfig>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d101      	bne.n	8003cfa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e022      	b.n	8003d40 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d002      	beq.n	8003d08 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 fad8 	bl	80042b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689a      	ldr	r2, [r3, #8]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0201 	orr.w	r2, r2, #1
 8003d36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 fb5f 	bl	80043fc <UART_CheckIdleState>
 8003d3e:	4603      	mov	r3, r0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d4c:	b08a      	sub	sp, #40	; 0x28
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d52:	2300      	movs	r3, #0
 8003d54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	431a      	orrs	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	431a      	orrs	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	4ba4      	ldr	r3, [pc, #656]	; (8004008 <UART_SetConfig+0x2c0>)
 8003d78:	4013      	ands	r3, r2
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	6812      	ldr	r2, [r2, #0]
 8003d7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d80:	430b      	orrs	r3, r1
 8003d82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	68da      	ldr	r2, [r3, #12]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a99      	ldr	r2, [pc, #612]	; (800400c <UART_SetConfig+0x2c4>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d004      	beq.n	8003db4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db0:	4313      	orrs	r3, r2
 8003db2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a90      	ldr	r2, [pc, #576]	; (8004010 <UART_SetConfig+0x2c8>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d126      	bne.n	8003e20 <UART_SetConfig+0xd8>
 8003dd2:	4b90      	ldr	r3, [pc, #576]	; (8004014 <UART_SetConfig+0x2cc>)
 8003dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd8:	f003 0303 	and.w	r3, r3, #3
 8003ddc:	2b03      	cmp	r3, #3
 8003dde:	d81b      	bhi.n	8003e18 <UART_SetConfig+0xd0>
 8003de0:	a201      	add	r2, pc, #4	; (adr r2, 8003de8 <UART_SetConfig+0xa0>)
 8003de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de6:	bf00      	nop
 8003de8:	08003df9 	.word	0x08003df9
 8003dec:	08003e09 	.word	0x08003e09
 8003df0:	08003e01 	.word	0x08003e01
 8003df4:	08003e11 	.word	0x08003e11
 8003df8:	2301      	movs	r3, #1
 8003dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dfe:	e116      	b.n	800402e <UART_SetConfig+0x2e6>
 8003e00:	2302      	movs	r3, #2
 8003e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e06:	e112      	b.n	800402e <UART_SetConfig+0x2e6>
 8003e08:	2304      	movs	r3, #4
 8003e0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e0e:	e10e      	b.n	800402e <UART_SetConfig+0x2e6>
 8003e10:	2308      	movs	r3, #8
 8003e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e16:	e10a      	b.n	800402e <UART_SetConfig+0x2e6>
 8003e18:	2310      	movs	r3, #16
 8003e1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e1e:	e106      	b.n	800402e <UART_SetConfig+0x2e6>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a7c      	ldr	r2, [pc, #496]	; (8004018 <UART_SetConfig+0x2d0>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d138      	bne.n	8003e9c <UART_SetConfig+0x154>
 8003e2a:	4b7a      	ldr	r3, [pc, #488]	; (8004014 <UART_SetConfig+0x2cc>)
 8003e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e30:	f003 030c 	and.w	r3, r3, #12
 8003e34:	2b0c      	cmp	r3, #12
 8003e36:	d82d      	bhi.n	8003e94 <UART_SetConfig+0x14c>
 8003e38:	a201      	add	r2, pc, #4	; (adr r2, 8003e40 <UART_SetConfig+0xf8>)
 8003e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3e:	bf00      	nop
 8003e40:	08003e75 	.word	0x08003e75
 8003e44:	08003e95 	.word	0x08003e95
 8003e48:	08003e95 	.word	0x08003e95
 8003e4c:	08003e95 	.word	0x08003e95
 8003e50:	08003e85 	.word	0x08003e85
 8003e54:	08003e95 	.word	0x08003e95
 8003e58:	08003e95 	.word	0x08003e95
 8003e5c:	08003e95 	.word	0x08003e95
 8003e60:	08003e7d 	.word	0x08003e7d
 8003e64:	08003e95 	.word	0x08003e95
 8003e68:	08003e95 	.word	0x08003e95
 8003e6c:	08003e95 	.word	0x08003e95
 8003e70:	08003e8d 	.word	0x08003e8d
 8003e74:	2300      	movs	r3, #0
 8003e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e7a:	e0d8      	b.n	800402e <UART_SetConfig+0x2e6>
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e82:	e0d4      	b.n	800402e <UART_SetConfig+0x2e6>
 8003e84:	2304      	movs	r3, #4
 8003e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e8a:	e0d0      	b.n	800402e <UART_SetConfig+0x2e6>
 8003e8c:	2308      	movs	r3, #8
 8003e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e92:	e0cc      	b.n	800402e <UART_SetConfig+0x2e6>
 8003e94:	2310      	movs	r3, #16
 8003e96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e9a:	e0c8      	b.n	800402e <UART_SetConfig+0x2e6>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a5e      	ldr	r2, [pc, #376]	; (800401c <UART_SetConfig+0x2d4>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d125      	bne.n	8003ef2 <UART_SetConfig+0x1aa>
 8003ea6:	4b5b      	ldr	r3, [pc, #364]	; (8004014 <UART_SetConfig+0x2cc>)
 8003ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003eb0:	2b30      	cmp	r3, #48	; 0x30
 8003eb2:	d016      	beq.n	8003ee2 <UART_SetConfig+0x19a>
 8003eb4:	2b30      	cmp	r3, #48	; 0x30
 8003eb6:	d818      	bhi.n	8003eea <UART_SetConfig+0x1a2>
 8003eb8:	2b20      	cmp	r3, #32
 8003eba:	d00a      	beq.n	8003ed2 <UART_SetConfig+0x18a>
 8003ebc:	2b20      	cmp	r3, #32
 8003ebe:	d814      	bhi.n	8003eea <UART_SetConfig+0x1a2>
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d002      	beq.n	8003eca <UART_SetConfig+0x182>
 8003ec4:	2b10      	cmp	r3, #16
 8003ec6:	d008      	beq.n	8003eda <UART_SetConfig+0x192>
 8003ec8:	e00f      	b.n	8003eea <UART_SetConfig+0x1a2>
 8003eca:	2300      	movs	r3, #0
 8003ecc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ed0:	e0ad      	b.n	800402e <UART_SetConfig+0x2e6>
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ed8:	e0a9      	b.n	800402e <UART_SetConfig+0x2e6>
 8003eda:	2304      	movs	r3, #4
 8003edc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ee0:	e0a5      	b.n	800402e <UART_SetConfig+0x2e6>
 8003ee2:	2308      	movs	r3, #8
 8003ee4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ee8:	e0a1      	b.n	800402e <UART_SetConfig+0x2e6>
 8003eea:	2310      	movs	r3, #16
 8003eec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ef0:	e09d      	b.n	800402e <UART_SetConfig+0x2e6>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a4a      	ldr	r2, [pc, #296]	; (8004020 <UART_SetConfig+0x2d8>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d125      	bne.n	8003f48 <UART_SetConfig+0x200>
 8003efc:	4b45      	ldr	r3, [pc, #276]	; (8004014 <UART_SetConfig+0x2cc>)
 8003efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f02:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003f06:	2bc0      	cmp	r3, #192	; 0xc0
 8003f08:	d016      	beq.n	8003f38 <UART_SetConfig+0x1f0>
 8003f0a:	2bc0      	cmp	r3, #192	; 0xc0
 8003f0c:	d818      	bhi.n	8003f40 <UART_SetConfig+0x1f8>
 8003f0e:	2b80      	cmp	r3, #128	; 0x80
 8003f10:	d00a      	beq.n	8003f28 <UART_SetConfig+0x1e0>
 8003f12:	2b80      	cmp	r3, #128	; 0x80
 8003f14:	d814      	bhi.n	8003f40 <UART_SetConfig+0x1f8>
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d002      	beq.n	8003f20 <UART_SetConfig+0x1d8>
 8003f1a:	2b40      	cmp	r3, #64	; 0x40
 8003f1c:	d008      	beq.n	8003f30 <UART_SetConfig+0x1e8>
 8003f1e:	e00f      	b.n	8003f40 <UART_SetConfig+0x1f8>
 8003f20:	2300      	movs	r3, #0
 8003f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f26:	e082      	b.n	800402e <UART_SetConfig+0x2e6>
 8003f28:	2302      	movs	r3, #2
 8003f2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f2e:	e07e      	b.n	800402e <UART_SetConfig+0x2e6>
 8003f30:	2304      	movs	r3, #4
 8003f32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f36:	e07a      	b.n	800402e <UART_SetConfig+0x2e6>
 8003f38:	2308      	movs	r3, #8
 8003f3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f3e:	e076      	b.n	800402e <UART_SetConfig+0x2e6>
 8003f40:	2310      	movs	r3, #16
 8003f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f46:	e072      	b.n	800402e <UART_SetConfig+0x2e6>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a35      	ldr	r2, [pc, #212]	; (8004024 <UART_SetConfig+0x2dc>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d12a      	bne.n	8003fa8 <UART_SetConfig+0x260>
 8003f52:	4b30      	ldr	r3, [pc, #192]	; (8004014 <UART_SetConfig+0x2cc>)
 8003f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f60:	d01a      	beq.n	8003f98 <UART_SetConfig+0x250>
 8003f62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f66:	d81b      	bhi.n	8003fa0 <UART_SetConfig+0x258>
 8003f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f6c:	d00c      	beq.n	8003f88 <UART_SetConfig+0x240>
 8003f6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f72:	d815      	bhi.n	8003fa0 <UART_SetConfig+0x258>
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d003      	beq.n	8003f80 <UART_SetConfig+0x238>
 8003f78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f7c:	d008      	beq.n	8003f90 <UART_SetConfig+0x248>
 8003f7e:	e00f      	b.n	8003fa0 <UART_SetConfig+0x258>
 8003f80:	2300      	movs	r3, #0
 8003f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f86:	e052      	b.n	800402e <UART_SetConfig+0x2e6>
 8003f88:	2302      	movs	r3, #2
 8003f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f8e:	e04e      	b.n	800402e <UART_SetConfig+0x2e6>
 8003f90:	2304      	movs	r3, #4
 8003f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f96:	e04a      	b.n	800402e <UART_SetConfig+0x2e6>
 8003f98:	2308      	movs	r3, #8
 8003f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f9e:	e046      	b.n	800402e <UART_SetConfig+0x2e6>
 8003fa0:	2310      	movs	r3, #16
 8003fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fa6:	e042      	b.n	800402e <UART_SetConfig+0x2e6>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a17      	ldr	r2, [pc, #92]	; (800400c <UART_SetConfig+0x2c4>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d13a      	bne.n	8004028 <UART_SetConfig+0x2e0>
 8003fb2:	4b18      	ldr	r3, [pc, #96]	; (8004014 <UART_SetConfig+0x2cc>)
 8003fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003fbc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fc0:	d01a      	beq.n	8003ff8 <UART_SetConfig+0x2b0>
 8003fc2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fc6:	d81b      	bhi.n	8004000 <UART_SetConfig+0x2b8>
 8003fc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fcc:	d00c      	beq.n	8003fe8 <UART_SetConfig+0x2a0>
 8003fce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fd2:	d815      	bhi.n	8004000 <UART_SetConfig+0x2b8>
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d003      	beq.n	8003fe0 <UART_SetConfig+0x298>
 8003fd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fdc:	d008      	beq.n	8003ff0 <UART_SetConfig+0x2a8>
 8003fde:	e00f      	b.n	8004000 <UART_SetConfig+0x2b8>
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fe6:	e022      	b.n	800402e <UART_SetConfig+0x2e6>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fee:	e01e      	b.n	800402e <UART_SetConfig+0x2e6>
 8003ff0:	2304      	movs	r3, #4
 8003ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ff6:	e01a      	b.n	800402e <UART_SetConfig+0x2e6>
 8003ff8:	2308      	movs	r3, #8
 8003ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ffe:	e016      	b.n	800402e <UART_SetConfig+0x2e6>
 8004000:	2310      	movs	r3, #16
 8004002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004006:	e012      	b.n	800402e <UART_SetConfig+0x2e6>
 8004008:	efff69f3 	.word	0xefff69f3
 800400c:	40008000 	.word	0x40008000
 8004010:	40013800 	.word	0x40013800
 8004014:	40021000 	.word	0x40021000
 8004018:	40004400 	.word	0x40004400
 800401c:	40004800 	.word	0x40004800
 8004020:	40004c00 	.word	0x40004c00
 8004024:	40005000 	.word	0x40005000
 8004028:	2310      	movs	r3, #16
 800402a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a9f      	ldr	r2, [pc, #636]	; (80042b0 <UART_SetConfig+0x568>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d17a      	bne.n	800412e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004038:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800403c:	2b08      	cmp	r3, #8
 800403e:	d824      	bhi.n	800408a <UART_SetConfig+0x342>
 8004040:	a201      	add	r2, pc, #4	; (adr r2, 8004048 <UART_SetConfig+0x300>)
 8004042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004046:	bf00      	nop
 8004048:	0800406d 	.word	0x0800406d
 800404c:	0800408b 	.word	0x0800408b
 8004050:	08004075 	.word	0x08004075
 8004054:	0800408b 	.word	0x0800408b
 8004058:	0800407b 	.word	0x0800407b
 800405c:	0800408b 	.word	0x0800408b
 8004060:	0800408b 	.word	0x0800408b
 8004064:	0800408b 	.word	0x0800408b
 8004068:	08004083 	.word	0x08004083
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800406c:	f7ff f8d6 	bl	800321c <HAL_RCC_GetPCLK1Freq>
 8004070:	61f8      	str	r0, [r7, #28]
        break;
 8004072:	e010      	b.n	8004096 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004074:	4b8f      	ldr	r3, [pc, #572]	; (80042b4 <UART_SetConfig+0x56c>)
 8004076:	61fb      	str	r3, [r7, #28]
        break;
 8004078:	e00d      	b.n	8004096 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800407a:	f7ff f837 	bl	80030ec <HAL_RCC_GetSysClockFreq>
 800407e:	61f8      	str	r0, [r7, #28]
        break;
 8004080:	e009      	b.n	8004096 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004082:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004086:	61fb      	str	r3, [r7, #28]
        break;
 8004088:	e005      	b.n	8004096 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800408a:	2300      	movs	r3, #0
 800408c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004094:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 80fb 	beq.w	8004294 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	4613      	mov	r3, r2
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	4413      	add	r3, r2
 80040a8:	69fa      	ldr	r2, [r7, #28]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d305      	bcc.n	80040ba <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80040b4:	69fa      	ldr	r2, [r7, #28]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d903      	bls.n	80040c2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80040c0:	e0e8      	b.n	8004294 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	2200      	movs	r2, #0
 80040c6:	461c      	mov	r4, r3
 80040c8:	4615      	mov	r5, r2
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	f04f 0300 	mov.w	r3, #0
 80040d2:	022b      	lsls	r3, r5, #8
 80040d4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80040d8:	0222      	lsls	r2, r4, #8
 80040da:	68f9      	ldr	r1, [r7, #12]
 80040dc:	6849      	ldr	r1, [r1, #4]
 80040de:	0849      	lsrs	r1, r1, #1
 80040e0:	2000      	movs	r0, #0
 80040e2:	4688      	mov	r8, r1
 80040e4:	4681      	mov	r9, r0
 80040e6:	eb12 0a08 	adds.w	sl, r2, r8
 80040ea:	eb43 0b09 	adc.w	fp, r3, r9
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	603b      	str	r3, [r7, #0]
 80040f6:	607a      	str	r2, [r7, #4]
 80040f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040fc:	4650      	mov	r0, sl
 80040fe:	4659      	mov	r1, fp
 8004100:	f7fc f86a 	bl	80001d8 <__aeabi_uldivmod>
 8004104:	4602      	mov	r2, r0
 8004106:	460b      	mov	r3, r1
 8004108:	4613      	mov	r3, r2
 800410a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004112:	d308      	bcc.n	8004126 <UART_SetConfig+0x3de>
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800411a:	d204      	bcs.n	8004126 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	60da      	str	r2, [r3, #12]
 8004124:	e0b6      	b.n	8004294 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800412c:	e0b2      	b.n	8004294 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004136:	d15e      	bne.n	80041f6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004138:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800413c:	2b08      	cmp	r3, #8
 800413e:	d828      	bhi.n	8004192 <UART_SetConfig+0x44a>
 8004140:	a201      	add	r2, pc, #4	; (adr r2, 8004148 <UART_SetConfig+0x400>)
 8004142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004146:	bf00      	nop
 8004148:	0800416d 	.word	0x0800416d
 800414c:	08004175 	.word	0x08004175
 8004150:	0800417d 	.word	0x0800417d
 8004154:	08004193 	.word	0x08004193
 8004158:	08004183 	.word	0x08004183
 800415c:	08004193 	.word	0x08004193
 8004160:	08004193 	.word	0x08004193
 8004164:	08004193 	.word	0x08004193
 8004168:	0800418b 	.word	0x0800418b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800416c:	f7ff f856 	bl	800321c <HAL_RCC_GetPCLK1Freq>
 8004170:	61f8      	str	r0, [r7, #28]
        break;
 8004172:	e014      	b.n	800419e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004174:	f7ff f868 	bl	8003248 <HAL_RCC_GetPCLK2Freq>
 8004178:	61f8      	str	r0, [r7, #28]
        break;
 800417a:	e010      	b.n	800419e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800417c:	4b4d      	ldr	r3, [pc, #308]	; (80042b4 <UART_SetConfig+0x56c>)
 800417e:	61fb      	str	r3, [r7, #28]
        break;
 8004180:	e00d      	b.n	800419e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004182:	f7fe ffb3 	bl	80030ec <HAL_RCC_GetSysClockFreq>
 8004186:	61f8      	str	r0, [r7, #28]
        break;
 8004188:	e009      	b.n	800419e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800418a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800418e:	61fb      	str	r3, [r7, #28]
        break;
 8004190:	e005      	b.n	800419e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004192:	2300      	movs	r3, #0
 8004194:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800419c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d077      	beq.n	8004294 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	005a      	lsls	r2, r3, #1
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	085b      	lsrs	r3, r3, #1
 80041ae:	441a      	add	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	2b0f      	cmp	r3, #15
 80041be:	d916      	bls.n	80041ee <UART_SetConfig+0x4a6>
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041c6:	d212      	bcs.n	80041ee <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	f023 030f 	bic.w	r3, r3, #15
 80041d0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	085b      	lsrs	r3, r3, #1
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	b29a      	uxth	r2, r3
 80041de:	8afb      	ldrh	r3, [r7, #22]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	8afa      	ldrh	r2, [r7, #22]
 80041ea:	60da      	str	r2, [r3, #12]
 80041ec:	e052      	b.n	8004294 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80041f4:	e04e      	b.n	8004294 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041fa:	2b08      	cmp	r3, #8
 80041fc:	d827      	bhi.n	800424e <UART_SetConfig+0x506>
 80041fe:	a201      	add	r2, pc, #4	; (adr r2, 8004204 <UART_SetConfig+0x4bc>)
 8004200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004204:	08004229 	.word	0x08004229
 8004208:	08004231 	.word	0x08004231
 800420c:	08004239 	.word	0x08004239
 8004210:	0800424f 	.word	0x0800424f
 8004214:	0800423f 	.word	0x0800423f
 8004218:	0800424f 	.word	0x0800424f
 800421c:	0800424f 	.word	0x0800424f
 8004220:	0800424f 	.word	0x0800424f
 8004224:	08004247 	.word	0x08004247
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004228:	f7fe fff8 	bl	800321c <HAL_RCC_GetPCLK1Freq>
 800422c:	61f8      	str	r0, [r7, #28]
        break;
 800422e:	e014      	b.n	800425a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004230:	f7ff f80a 	bl	8003248 <HAL_RCC_GetPCLK2Freq>
 8004234:	61f8      	str	r0, [r7, #28]
        break;
 8004236:	e010      	b.n	800425a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004238:	4b1e      	ldr	r3, [pc, #120]	; (80042b4 <UART_SetConfig+0x56c>)
 800423a:	61fb      	str	r3, [r7, #28]
        break;
 800423c:	e00d      	b.n	800425a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800423e:	f7fe ff55 	bl	80030ec <HAL_RCC_GetSysClockFreq>
 8004242:	61f8      	str	r0, [r7, #28]
        break;
 8004244:	e009      	b.n	800425a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800424a:	61fb      	str	r3, [r7, #28]
        break;
 800424c:	e005      	b.n	800425a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800424e:	2300      	movs	r3, #0
 8004250:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004258:	bf00      	nop
    }

    if (pclk != 0U)
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d019      	beq.n	8004294 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	085a      	lsrs	r2, r3, #1
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	441a      	add	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004272:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	2b0f      	cmp	r3, #15
 8004278:	d909      	bls.n	800428e <UART_SetConfig+0x546>
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004280:	d205      	bcs.n	800428e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	b29a      	uxth	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	60da      	str	r2, [r3, #12]
 800428c:	e002      	b.n	8004294 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80042a0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3728      	adds	r7, #40	; 0x28
 80042a8:	46bd      	mov	sp, r7
 80042aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042ae:	bf00      	nop
 80042b0:	40008000 	.word	0x40008000
 80042b4:	00f42400 	.word	0x00f42400

080042b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00a      	beq.n	80042e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00a      	beq.n	8004304 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	430a      	orrs	r2, r1
 8004302:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	f003 0304 	and.w	r3, r3, #4
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00a      	beq.n	8004326 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432a:	f003 0308 	and.w	r3, r3, #8
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00a      	beq.n	8004348 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434c:	f003 0310 	and.w	r3, r3, #16
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00a      	beq.n	800436a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	f003 0320 	and.w	r3, r3, #32
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004394:	2b00      	cmp	r3, #0
 8004396:	d01a      	beq.n	80043ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043b6:	d10a      	bne.n	80043ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00a      	beq.n	80043f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	430a      	orrs	r2, r1
 80043ee:	605a      	str	r2, [r3, #4]
  }
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af02      	add	r7, sp, #8
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800440c:	f7fc fc42 	bl	8000c94 <HAL_GetTick>
 8004410:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0308 	and.w	r3, r3, #8
 800441c:	2b08      	cmp	r3, #8
 800441e:	d10e      	bne.n	800443e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004420:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f82d 	bl	800448e <UART_WaitOnFlagUntilTimeout>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e023      	b.n	8004486 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b04      	cmp	r3, #4
 800444a:	d10e      	bne.n	800446a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800444c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f817 	bl	800448e <UART_WaitOnFlagUntilTimeout>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e00d      	b.n	8004486 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2220      	movs	r2, #32
 800446e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2220      	movs	r2, #32
 8004474:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b09c      	sub	sp, #112	; 0x70
 8004492:	af00      	add	r7, sp, #0
 8004494:	60f8      	str	r0, [r7, #12]
 8004496:	60b9      	str	r1, [r7, #8]
 8004498:	603b      	str	r3, [r7, #0]
 800449a:	4613      	mov	r3, r2
 800449c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800449e:	e0a5      	b.n	80045ec <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a6:	f000 80a1 	beq.w	80045ec <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044aa:	f7fc fbf3 	bl	8000c94 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d302      	bcc.n	80044c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80044ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d13e      	bne.n	800453e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044c8:	e853 3f00 	ldrex	r3, [r3]
 80044cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80044ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044d4:	667b      	str	r3, [r7, #100]	; 0x64
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	461a      	mov	r2, r3
 80044dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044e0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80044e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80044e6:	e841 2300 	strex	r3, r2, [r1]
 80044ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80044ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1e6      	bne.n	80044c0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	3308      	adds	r3, #8
 80044f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044fc:	e853 3f00 	ldrex	r3, [r3]
 8004500:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004504:	f023 0301 	bic.w	r3, r3, #1
 8004508:	663b      	str	r3, [r7, #96]	; 0x60
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	3308      	adds	r3, #8
 8004510:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004512:	64ba      	str	r2, [r7, #72]	; 0x48
 8004514:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004516:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004518:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800451a:	e841 2300 	strex	r3, r2, [r1]
 800451e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1e5      	bne.n	80044f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2220      	movs	r2, #32
 800452a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2220      	movs	r2, #32
 8004530:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e067      	b.n	800460e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b00      	cmp	r3, #0
 800454a:	d04f      	beq.n	80045ec <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004556:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800455a:	d147      	bne.n	80045ec <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004564:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456e:	e853 3f00 	ldrex	r3, [r3]
 8004572:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800457a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	461a      	mov	r2, r3
 8004582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004584:	637b      	str	r3, [r7, #52]	; 0x34
 8004586:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004588:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800458a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800458c:	e841 2300 	strex	r3, r2, [r1]
 8004590:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1e6      	bne.n	8004566 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3308      	adds	r3, #8
 800459e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	e853 3f00 	ldrex	r3, [r3]
 80045a6:	613b      	str	r3, [r7, #16]
   return(result);
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	f023 0301 	bic.w	r3, r3, #1
 80045ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	3308      	adds	r3, #8
 80045b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80045b8:	623a      	str	r2, [r7, #32]
 80045ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045bc:	69f9      	ldr	r1, [r7, #28]
 80045be:	6a3a      	ldr	r2, [r7, #32]
 80045c0:	e841 2300 	strex	r3, r2, [r1]
 80045c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1e5      	bne.n	8004598 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2220      	movs	r2, #32
 80045d0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2220      	movs	r2, #32
 80045d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2220      	movs	r2, #32
 80045dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e010      	b.n	800460e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	69da      	ldr	r2, [r3, #28]
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	4013      	ands	r3, r2
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	bf0c      	ite	eq
 80045fc:	2301      	moveq	r3, #1
 80045fe:	2300      	movne	r3, #0
 8004600:	b2db      	uxtb	r3, r3
 8004602:	461a      	mov	r2, r3
 8004604:	79fb      	ldrb	r3, [r7, #7]
 8004606:	429a      	cmp	r2, r3
 8004608:	f43f af4a 	beq.w	80044a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3770      	adds	r7, #112	; 0x70
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
	...

08004618 <__libc_init_array>:
 8004618:	b570      	push	{r4, r5, r6, lr}
 800461a:	4d0d      	ldr	r5, [pc, #52]	; (8004650 <__libc_init_array+0x38>)
 800461c:	4c0d      	ldr	r4, [pc, #52]	; (8004654 <__libc_init_array+0x3c>)
 800461e:	1b64      	subs	r4, r4, r5
 8004620:	10a4      	asrs	r4, r4, #2
 8004622:	2600      	movs	r6, #0
 8004624:	42a6      	cmp	r6, r4
 8004626:	d109      	bne.n	800463c <__libc_init_array+0x24>
 8004628:	4d0b      	ldr	r5, [pc, #44]	; (8004658 <__libc_init_array+0x40>)
 800462a:	4c0c      	ldr	r4, [pc, #48]	; (800465c <__libc_init_array+0x44>)
 800462c:	f000 f82e 	bl	800468c <_init>
 8004630:	1b64      	subs	r4, r4, r5
 8004632:	10a4      	asrs	r4, r4, #2
 8004634:	2600      	movs	r6, #0
 8004636:	42a6      	cmp	r6, r4
 8004638:	d105      	bne.n	8004646 <__libc_init_array+0x2e>
 800463a:	bd70      	pop	{r4, r5, r6, pc}
 800463c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004640:	4798      	blx	r3
 8004642:	3601      	adds	r6, #1
 8004644:	e7ee      	b.n	8004624 <__libc_init_array+0xc>
 8004646:	f855 3b04 	ldr.w	r3, [r5], #4
 800464a:	4798      	blx	r3
 800464c:	3601      	adds	r6, #1
 800464e:	e7f2      	b.n	8004636 <__libc_init_array+0x1e>
 8004650:	080047d0 	.word	0x080047d0
 8004654:	080047d0 	.word	0x080047d0
 8004658:	080047d0 	.word	0x080047d0
 800465c:	080047d4 	.word	0x080047d4

08004660 <memcpy>:
 8004660:	440a      	add	r2, r1
 8004662:	4291      	cmp	r1, r2
 8004664:	f100 33ff 	add.w	r3, r0, #4294967295
 8004668:	d100      	bne.n	800466c <memcpy+0xc>
 800466a:	4770      	bx	lr
 800466c:	b510      	push	{r4, lr}
 800466e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004672:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004676:	4291      	cmp	r1, r2
 8004678:	d1f9      	bne.n	800466e <memcpy+0xe>
 800467a:	bd10      	pop	{r4, pc}

0800467c <memset>:
 800467c:	4402      	add	r2, r0
 800467e:	4603      	mov	r3, r0
 8004680:	4293      	cmp	r3, r2
 8004682:	d100      	bne.n	8004686 <memset+0xa>
 8004684:	4770      	bx	lr
 8004686:	f803 1b01 	strb.w	r1, [r3], #1
 800468a:	e7f9      	b.n	8004680 <memset+0x4>

0800468c <_init>:
 800468c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800468e:	bf00      	nop
 8004690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004692:	bc08      	pop	{r3}
 8004694:	469e      	mov	lr, r3
 8004696:	4770      	bx	lr

08004698 <_fini>:
 8004698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800469a:	bf00      	nop
 800469c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800469e:	bc08      	pop	{r3}
 80046a0:	469e      	mov	lr, r3
 80046a2:	4770      	bx	lr
